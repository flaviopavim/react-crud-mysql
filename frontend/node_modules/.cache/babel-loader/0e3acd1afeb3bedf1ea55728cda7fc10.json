{"ast":null,"code":"/*!\r\n * express\r\n * Copyright(c) 2009-2013 TJ Holowaychuk\r\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\r\n * MIT Licensed\r\n */\n'use strict';\n/**\r\n * Module dependencies.\r\n * @api private\r\n */\n\nvar Buffer = require('safe-buffer').Buffer;\n\nvar contentDisposition = require('content-disposition');\n\nvar contentType = require('content-type');\n\nvar deprecate = require('depd')('express');\n\nvar flatten = require('array-flatten');\n\nvar mime = require('send').mime;\n\nvar etag = require('etag');\n\nvar proxyaddr = require('proxy-addr');\n\nvar qs = require('qs');\n\nvar querystring = require('querystring');\n/**\r\n * Return strong ETag for `body`.\r\n *\r\n * @param {String|Buffer} body\r\n * @param {String} [encoding]\r\n * @return {String}\r\n * @api private\r\n */\n\n\nexports.etag = createETagGenerator({\n  weak: false\n});\n/**\r\n * Return weak ETag for `body`.\r\n *\r\n * @param {String|Buffer} body\r\n * @param {String} [encoding]\r\n * @return {String}\r\n * @api private\r\n */\n\nexports.wetag = createETagGenerator({\n  weak: true\n});\n/**\r\n * Check if `path` looks absolute.\r\n *\r\n * @param {String} path\r\n * @return {Boolean}\r\n * @api private\r\n */\n\nexports.isAbsolute = function (path) {\n  if ('/' === path[0]) return true;\n  if (':' === path[1] && ('\\\\' === path[2] || '/' === path[2])) return true; // Windows device path\n\n  if ('\\\\\\\\' === path.substring(0, 2)) return true; // Microsoft Azure absolute path\n};\n/**\r\n * Flatten the given `arr`.\r\n *\r\n * @param {Array} arr\r\n * @return {Array}\r\n * @api private\r\n */\n\n\nexports.flatten = deprecate.function(flatten, 'utils.flatten: use array-flatten npm module instead');\n/**\r\n * Normalize the given `type`, for example \"html\" becomes \"text/html\".\r\n *\r\n * @param {String} type\r\n * @return {Object}\r\n * @api private\r\n */\n\nexports.normalizeType = function (type) {\n  return ~type.indexOf('/') ? acceptParams(type) : {\n    value: mime.lookup(type),\n    params: {}\n  };\n};\n/**\r\n * Normalize `types`, for example \"html\" becomes \"text/html\".\r\n *\r\n * @param {Array} types\r\n * @return {Array}\r\n * @api private\r\n */\n\n\nexports.normalizeTypes = function (types) {\n  var ret = [];\n\n  for (var i = 0; i < types.length; ++i) {\n    ret.push(exports.normalizeType(types[i]));\n  }\n\n  return ret;\n};\n/**\r\n * Generate Content-Disposition header appropriate for the filename.\r\n * non-ascii filenames are urlencoded and a filename* parameter is added\r\n *\r\n * @param {String} filename\r\n * @return {String}\r\n * @api private\r\n */\n\n\nexports.contentDisposition = deprecate.function(contentDisposition, 'utils.contentDisposition: use content-disposition npm module instead');\n/**\r\n * Parse accept params `str` returning an\r\n * object with `.value`, `.quality` and `.params`.\r\n * also includes `.originalIndex` for stable sorting\r\n *\r\n * @param {String} str\r\n * @return {Object}\r\n * @api private\r\n */\n\nfunction acceptParams(str, index) {\n  var parts = str.split(/ *; */);\n  var ret = {\n    value: parts[0],\n    quality: 1,\n    params: {},\n    originalIndex: index\n  };\n\n  for (var i = 1; i < parts.length; ++i) {\n    var pms = parts[i].split(/ *= */);\n\n    if ('q' === pms[0]) {\n      ret.quality = parseFloat(pms[1]);\n    } else {\n      ret.params[pms[0]] = pms[1];\n    }\n  }\n\n  return ret;\n}\n/**\r\n * Compile \"etag\" value to function.\r\n *\r\n * @param  {Boolean|String|Function} val\r\n * @return {Function}\r\n * @api private\r\n */\n\n\nexports.compileETag = function (val) {\n  var fn;\n\n  if (typeof val === 'function') {\n    return val;\n  }\n\n  switch (val) {\n    case true:\n    case 'weak':\n      fn = exports.wetag;\n      break;\n\n    case false:\n      break;\n\n    case 'strong':\n      fn = exports.etag;\n      break;\n\n    default:\n      throw new TypeError('unknown value for etag function: ' + val);\n  }\n\n  return fn;\n};\n/**\r\n * Compile \"query parser\" value to function.\r\n *\r\n * @param  {String|Function} val\r\n * @return {Function}\r\n * @api private\r\n */\n\n\nexports.compileQueryParser = function compileQueryParser(val) {\n  var fn;\n\n  if (typeof val === 'function') {\n    return val;\n  }\n\n  switch (val) {\n    case true:\n    case 'simple':\n      fn = querystring.parse;\n      break;\n\n    case false:\n      fn = newObject;\n      break;\n\n    case 'extended':\n      fn = parseExtendedQueryString;\n      break;\n\n    default:\n      throw new TypeError('unknown value for query parser function: ' + val);\n  }\n\n  return fn;\n};\n/**\r\n * Compile \"proxy trust\" value to function.\r\n *\r\n * @param  {Boolean|String|Number|Array|Function} val\r\n * @return {Function}\r\n * @api private\r\n */\n\n\nexports.compileTrust = function (val) {\n  if (typeof val === 'function') return val;\n\n  if (val === true) {\n    // Support plain true/false\n    return function () {\n      return true;\n    };\n  }\n\n  if (typeof val === 'number') {\n    // Support trusting hop count\n    return function (a, i) {\n      return i < val;\n    };\n  }\n\n  if (typeof val === 'string') {\n    // Support comma-separated values\n    val = val.split(/ *, */);\n  }\n\n  return proxyaddr.compile(val || []);\n};\n/**\r\n * Set the charset in a given Content-Type string.\r\n *\r\n * @param {String} type\r\n * @param {String} charset\r\n * @return {String}\r\n * @api private\r\n */\n\n\nexports.setCharset = function setCharset(type, charset) {\n  if (!type || !charset) {\n    return type;\n  } // parse type\n\n\n  var parsed = contentType.parse(type); // set charset\n\n  parsed.parameters.charset = charset; // format type\n\n  return contentType.format(parsed);\n};\n/**\r\n * Create an ETag generator function, generating ETags with\r\n * the given options.\r\n *\r\n * @param {object} options\r\n * @return {function}\r\n * @private\r\n */\n\n\nfunction createETagGenerator(options) {\n  return function generateETag(body, encoding) {\n    var buf = !Buffer.isBuffer(body) ? Buffer.from(body, encoding) : body;\n    return etag(buf, options);\n  };\n}\n/**\r\n * Parse an extended query string with qs.\r\n *\r\n * @return {Object}\r\n * @private\r\n */\n\n\nfunction parseExtendedQueryString(str) {\n  return qs.parse(str, {\n    allowPrototypes: true\n  });\n}\n/**\r\n * Return new empty object.\r\n *\r\n * @return {Object}\r\n * @api private\r\n */\n\n\nfunction newObject() {\n  return {};\n}","map":{"version":3,"sources":["D:/Work/Testes/react-crud-test/frontend/node_modules/express/lib/utils.js"],"names":["Buffer","require","contentDisposition","contentType","deprecate","flatten","mime","etag","proxyaddr","qs","querystring","exports","createETagGenerator","weak","wetag","isAbsolute","path","substring","function","normalizeType","type","indexOf","acceptParams","value","lookup","params","normalizeTypes","types","ret","i","length","push","str","index","parts","split","quality","originalIndex","pms","parseFloat","compileETag","val","fn","TypeError","compileQueryParser","parse","newObject","parseExtendedQueryString","compileTrust","a","compile","setCharset","charset","parsed","parameters","format","options","generateETag","body","encoding","buf","isBuffer","from","allowPrototypes"],"mappings":"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","sourcesContent":["/*!\r\n * express\r\n * Copyright(c) 2009-2013 TJ Holowaychuk\r\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\r\n * MIT Licensed\r\n */\r\n\r\n'use strict';\r\n\r\n/**\r\n * Module dependencies.\r\n * @api private\r\n */\r\n\r\nvar Buffer = require('safe-buffer').Buffer\r\nvar contentDisposition = require('content-disposition');\r\nvar contentType = require('content-type');\r\nvar deprecate = require('depd')('express');\r\nvar flatten = require('array-flatten');\r\nvar mime = require('send').mime;\r\nvar etag = require('etag');\r\nvar proxyaddr = require('proxy-addr');\r\nvar qs = require('qs');\r\nvar querystring = require('querystring');\r\n\r\n/**\r\n * Return strong ETag for `body`.\r\n *\r\n * @param {String|Buffer} body\r\n * @param {String} [encoding]\r\n * @return {String}\r\n * @api private\r\n */\r\n\r\nexports.etag = createETagGenerator({ weak: false })\r\n\r\n/**\r\n * Return weak ETag for `body`.\r\n *\r\n * @param {String|Buffer} body\r\n * @param {String} [encoding]\r\n * @return {String}\r\n * @api private\r\n */\r\n\r\nexports.wetag = createETagGenerator({ weak: true })\r\n\r\n/**\r\n * Check if `path` looks absolute.\r\n *\r\n * @param {String} path\r\n * @return {Boolean}\r\n * @api private\r\n */\r\n\r\nexports.isAbsolute = function(path){\r\n  if ('/' === path[0]) return true;\r\n  if (':' === path[1] && ('\\\\' === path[2] || '/' === path[2])) return true; // Windows device path\r\n  if ('\\\\\\\\' === path.substring(0, 2)) return true; // Microsoft Azure absolute path\r\n};\r\n\r\n/**\r\n * Flatten the given `arr`.\r\n *\r\n * @param {Array} arr\r\n * @return {Array}\r\n * @api private\r\n */\r\n\r\nexports.flatten = deprecate.function(flatten,\r\n  'utils.flatten: use array-flatten npm module instead');\r\n\r\n/**\r\n * Normalize the given `type`, for example \"html\" becomes \"text/html\".\r\n *\r\n * @param {String} type\r\n * @return {Object}\r\n * @api private\r\n */\r\n\r\nexports.normalizeType = function(type){\r\n  return ~type.indexOf('/')\r\n    ? acceptParams(type)\r\n    : { value: mime.lookup(type), params: {} };\r\n};\r\n\r\n/**\r\n * Normalize `types`, for example \"html\" becomes \"text/html\".\r\n *\r\n * @param {Array} types\r\n * @return {Array}\r\n * @api private\r\n */\r\n\r\nexports.normalizeTypes = function(types){\r\n  var ret = [];\r\n\r\n  for (var i = 0; i < types.length; ++i) {\r\n    ret.push(exports.normalizeType(types[i]));\r\n  }\r\n\r\n  return ret;\r\n};\r\n\r\n/**\r\n * Generate Content-Disposition header appropriate for the filename.\r\n * non-ascii filenames are urlencoded and a filename* parameter is added\r\n *\r\n * @param {String} filename\r\n * @return {String}\r\n * @api private\r\n */\r\n\r\nexports.contentDisposition = deprecate.function(contentDisposition,\r\n  'utils.contentDisposition: use content-disposition npm module instead');\r\n\r\n/**\r\n * Parse accept params `str` returning an\r\n * object with `.value`, `.quality` and `.params`.\r\n * also includes `.originalIndex` for stable sorting\r\n *\r\n * @param {String} str\r\n * @return {Object}\r\n * @api private\r\n */\r\n\r\nfunction acceptParams(str, index) {\r\n  var parts = str.split(/ *; */);\r\n  var ret = { value: parts[0], quality: 1, params: {}, originalIndex: index };\r\n\r\n  for (var i = 1; i < parts.length; ++i) {\r\n    var pms = parts[i].split(/ *= */);\r\n    if ('q' === pms[0]) {\r\n      ret.quality = parseFloat(pms[1]);\r\n    } else {\r\n      ret.params[pms[0]] = pms[1];\r\n    }\r\n  }\r\n\r\n  return ret;\r\n}\r\n\r\n/**\r\n * Compile \"etag\" value to function.\r\n *\r\n * @param  {Boolean|String|Function} val\r\n * @return {Function}\r\n * @api private\r\n */\r\n\r\nexports.compileETag = function(val) {\r\n  var fn;\r\n\r\n  if (typeof val === 'function') {\r\n    return val;\r\n  }\r\n\r\n  switch (val) {\r\n    case true:\r\n    case 'weak':\r\n      fn = exports.wetag;\r\n      break;\r\n    case false:\r\n      break;\r\n    case 'strong':\r\n      fn = exports.etag;\r\n      break;\r\n    default:\r\n      throw new TypeError('unknown value for etag function: ' + val);\r\n  }\r\n\r\n  return fn;\r\n}\r\n\r\n/**\r\n * Compile \"query parser\" value to function.\r\n *\r\n * @param  {String|Function} val\r\n * @return {Function}\r\n * @api private\r\n */\r\n\r\nexports.compileQueryParser = function compileQueryParser(val) {\r\n  var fn;\r\n\r\n  if (typeof val === 'function') {\r\n    return val;\r\n  }\r\n\r\n  switch (val) {\r\n    case true:\r\n    case 'simple':\r\n      fn = querystring.parse;\r\n      break;\r\n    case false:\r\n      fn = newObject;\r\n      break;\r\n    case 'extended':\r\n      fn = parseExtendedQueryString;\r\n      break;\r\n    default:\r\n      throw new TypeError('unknown value for query parser function: ' + val);\r\n  }\r\n\r\n  return fn;\r\n}\r\n\r\n/**\r\n * Compile \"proxy trust\" value to function.\r\n *\r\n * @param  {Boolean|String|Number|Array|Function} val\r\n * @return {Function}\r\n * @api private\r\n */\r\n\r\nexports.compileTrust = function(val) {\r\n  if (typeof val === 'function') return val;\r\n\r\n  if (val === true) {\r\n    // Support plain true/false\r\n    return function(){ return true };\r\n  }\r\n\r\n  if (typeof val === 'number') {\r\n    // Support trusting hop count\r\n    return function(a, i){ return i < val };\r\n  }\r\n\r\n  if (typeof val === 'string') {\r\n    // Support comma-separated values\r\n    val = val.split(/ *, */);\r\n  }\r\n\r\n  return proxyaddr.compile(val || []);\r\n}\r\n\r\n/**\r\n * Set the charset in a given Content-Type string.\r\n *\r\n * @param {String} type\r\n * @param {String} charset\r\n * @return {String}\r\n * @api private\r\n */\r\n\r\nexports.setCharset = function setCharset(type, charset) {\r\n  if (!type || !charset) {\r\n    return type;\r\n  }\r\n\r\n  // parse type\r\n  var parsed = contentType.parse(type);\r\n\r\n  // set charset\r\n  parsed.parameters.charset = charset;\r\n\r\n  // format type\r\n  return contentType.format(parsed);\r\n};\r\n\r\n/**\r\n * Create an ETag generator function, generating ETags with\r\n * the given options.\r\n *\r\n * @param {object} options\r\n * @return {function}\r\n * @private\r\n */\r\n\r\nfunction createETagGenerator (options) {\r\n  return function generateETag (body, encoding) {\r\n    var buf = !Buffer.isBuffer(body)\r\n      ? Buffer.from(body, encoding)\r\n      : body\r\n\r\n    return etag(buf, options)\r\n  }\r\n}\r\n\r\n/**\r\n * Parse an extended query string with qs.\r\n *\r\n * @return {Object}\r\n * @private\r\n */\r\n\r\nfunction parseExtendedQueryString(str) {\r\n  return qs.parse(str, {\r\n    allowPrototypes: true\r\n  });\r\n}\r\n\r\n/**\r\n * Return new empty object.\r\n *\r\n * @return {Object}\r\n * @api private\r\n */\r\n\r\nfunction newObject() {\r\n  return {};\r\n}\r\n"]},"metadata":{},"sourceType":"script"}