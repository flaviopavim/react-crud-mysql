{"ast":null,"code":"/*!\r\n * finalhandler\r\n * Copyright(c) 2014-2017 Douglas Christopher Wilson\r\n * MIT Licensed\r\n */\n'use strict';\n/**\r\n * Module dependencies.\r\n * @private\r\n */\n\nvar debug = require('debug')('finalhandler');\n\nvar encodeUrl = require('encodeurl');\n\nvar escapeHtml = require('escape-html');\n\nvar onFinished = require('on-finished');\n\nvar parseUrl = require('parseurl');\n\nvar statuses = require('statuses');\n\nvar unpipe = require('unpipe');\n/**\r\n * Module variables.\r\n * @private\r\n */\n\n\nvar DOUBLE_SPACE_REGEXP = /\\x20{2}/g;\nvar NEWLINE_REGEXP = /\\n/g;\n/* istanbul ignore next */\n\nvar defer = typeof setImmediate === 'function' ? setImmediate : function (fn) {\n  process.nextTick(fn.bind.apply(fn, arguments));\n};\nvar isFinished = onFinished.isFinished;\n/**\r\n * Create a minimal HTML document.\r\n *\r\n * @param {string} message\r\n * @private\r\n */\n\nfunction createHtmlDocument(message) {\n  var body = escapeHtml(message).replace(NEWLINE_REGEXP, '<br>').replace(DOUBLE_SPACE_REGEXP, ' &nbsp;');\n  return '<!DOCTYPE html>\\n' + '<html lang=\"en\">\\n' + '<head>\\n' + '<meta charset=\"utf-8\">\\n' + '<title>Error</title>\\n' + '</head>\\n' + '<body>\\n' + '<pre>' + body + '</pre>\\n' + '</body>\\n' + '</html>\\n';\n}\n/**\r\n * Module exports.\r\n * @public\r\n */\n\n\nmodule.exports = finalhandler;\n/**\r\n * Create a function to handle the final response.\r\n *\r\n * @param {Request} req\r\n * @param {Response} res\r\n * @param {Object} [options]\r\n * @return {Function}\r\n * @public\r\n */\n\nfunction finalhandler(req, res, options) {\n  var opts = options || {}; // get environment\n\n  var env = opts.env || process.env.NODE_ENV || 'development'; // get error callback\n\n  var onerror = opts.onerror;\n  return function (err) {\n    var headers;\n    var msg;\n    var status; // ignore 404 on in-flight response\n\n    if (!err && headersSent(res)) {\n      debug('cannot 404 after headers sent');\n      return;\n    } // unhandled error\n\n\n    if (err) {\n      // respect status code from error\n      status = getErrorStatusCode(err);\n\n      if (status === undefined) {\n        // fallback to status code on response\n        status = getResponseStatusCode(res);\n      } else {\n        // respect headers from error\n        headers = getErrorHeaders(err);\n      } // get error message\n\n\n      msg = getErrorMessage(err, status, env);\n    } else {\n      // not found\n      status = 404;\n      msg = 'Cannot ' + req.method + ' ' + encodeUrl(getResourceName(req));\n    }\n\n    debug('default %s', status); // schedule onerror callback\n\n    if (err && onerror) {\n      defer(onerror, err, req, res);\n    } // cannot actually respond\n\n\n    if (headersSent(res)) {\n      debug('cannot %d after headers sent', status);\n      req.socket.destroy();\n      return;\n    } // send response\n\n\n    send(req, res, status, headers, msg);\n  };\n}\n/**\r\n * Get headers from Error object.\r\n *\r\n * @param {Error} err\r\n * @return {object}\r\n * @private\r\n */\n\n\nfunction getErrorHeaders(err) {\n  if (!err.headers || typeof err.headers !== 'object') {\n    return undefined;\n  }\n\n  var headers = Object.create(null);\n  var keys = Object.keys(err.headers);\n\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    headers[key] = err.headers[key];\n  }\n\n  return headers;\n}\n/**\r\n * Get message from Error object, fallback to status message.\r\n *\r\n * @param {Error} err\r\n * @param {number} status\r\n * @param {string} env\r\n * @return {string}\r\n * @private\r\n */\n\n\nfunction getErrorMessage(err, status, env) {\n  var msg;\n\n  if (env !== 'production') {\n    // use err.stack, which typically includes err.message\n    msg = err.stack; // fallback to err.toString() when possible\n\n    if (!msg && typeof err.toString === 'function') {\n      msg = err.toString();\n    }\n  }\n\n  return msg || statuses[status];\n}\n/**\r\n * Get status code from Error object.\r\n *\r\n * @param {Error} err\r\n * @return {number}\r\n * @private\r\n */\n\n\nfunction getErrorStatusCode(err) {\n  // check err.status\n  if (typeof err.status === 'number' && err.status >= 400 && err.status < 600) {\n    return err.status;\n  } // check err.statusCode\n\n\n  if (typeof err.statusCode === 'number' && err.statusCode >= 400 && err.statusCode < 600) {\n    return err.statusCode;\n  }\n\n  return undefined;\n}\n/**\r\n * Get resource name for the request.\r\n *\r\n * This is typically just the original pathname of the request\r\n * but will fallback to \"resource\" is that cannot be determined.\r\n *\r\n * @param {IncomingMessage} req\r\n * @return {string}\r\n * @private\r\n */\n\n\nfunction getResourceName(req) {\n  try {\n    return parseUrl.original(req).pathname;\n  } catch (e) {\n    return 'resource';\n  }\n}\n/**\r\n * Get status code from response.\r\n *\r\n * @param {OutgoingMessage} res\r\n * @return {number}\r\n * @private\r\n */\n\n\nfunction getResponseStatusCode(res) {\n  var status = res.statusCode; // default status code to 500 if outside valid range\n\n  if (typeof status !== 'number' || status < 400 || status > 599) {\n    status = 500;\n  }\n\n  return status;\n}\n/**\r\n * Determine if the response headers have been sent.\r\n *\r\n * @param {object} res\r\n * @returns {boolean}\r\n * @private\r\n */\n\n\nfunction headersSent(res) {\n  return typeof res.headersSent !== 'boolean' ? Boolean(res._header) : res.headersSent;\n}\n/**\r\n * Send response.\r\n *\r\n * @param {IncomingMessage} req\r\n * @param {OutgoingMessage} res\r\n * @param {number} status\r\n * @param {object} headers\r\n * @param {string} message\r\n * @private\r\n */\n\n\nfunction send(req, res, status, headers, message) {\n  function write() {\n    // response body\n    var body = createHtmlDocument(message); // response status\n\n    res.statusCode = status;\n    res.statusMessage = statuses[status]; // response headers\n\n    setHeaders(res, headers); // security headers\n\n    res.setHeader('Content-Security-Policy', \"default-src 'none'\");\n    res.setHeader('X-Content-Type-Options', 'nosniff'); // standard headers\n\n    res.setHeader('Content-Type', 'text/html; charset=utf-8');\n    res.setHeader('Content-Length', Buffer.byteLength(body, 'utf8'));\n\n    if (req.method === 'HEAD') {\n      res.end();\n      return;\n    }\n\n    res.end(body, 'utf8');\n  }\n\n  if (isFinished(req)) {\n    write();\n    return;\n  } // unpipe everything from the request\n\n\n  unpipe(req); // flush the request\n\n  onFinished(req, write);\n  req.resume();\n}\n/**\r\n * Set response headers from an object.\r\n *\r\n * @param {OutgoingMessage} res\r\n * @param {object} headers\r\n * @private\r\n */\n\n\nfunction setHeaders(res, headers) {\n  if (!headers) {\n    return;\n  }\n\n  var keys = Object.keys(headers);\n\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    res.setHeader(key, headers[key]);\n  }\n}","map":{"version":3,"sources":["D:/Work/Testes/react-crud-test/frontend/node_modules/finalhandler/index.js"],"names":["debug","require","encodeUrl","escapeHtml","onFinished","parseUrl","statuses","unpipe","DOUBLE_SPACE_REGEXP","NEWLINE_REGEXP","defer","setImmediate","fn","process","nextTick","bind","apply","arguments","isFinished","createHtmlDocument","message","body","replace","module","exports","finalhandler","req","res","options","opts","env","NODE_ENV","onerror","err","headers","msg","status","headersSent","getErrorStatusCode","undefined","getResponseStatusCode","getErrorHeaders","getErrorMessage","method","getResourceName","socket","destroy","send","Object","create","keys","i","length","key","stack","toString","statusCode","original","pathname","e","Boolean","_header","write","statusMessage","setHeaders","setHeader","Buffer","byteLength","end","resume"],"mappings":"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","sourcesContent":["/*!\r\n * finalhandler\r\n * Copyright(c) 2014-2017 Douglas Christopher Wilson\r\n * MIT Licensed\r\n */\r\n\r\n'use strict'\r\n\r\n/**\r\n * Module dependencies.\r\n * @private\r\n */\r\n\r\nvar debug = require('debug')('finalhandler')\r\nvar encodeUrl = require('encodeurl')\r\nvar escapeHtml = require('escape-html')\r\nvar onFinished = require('on-finished')\r\nvar parseUrl = require('parseurl')\r\nvar statuses = require('statuses')\r\nvar unpipe = require('unpipe')\r\n\r\n/**\r\n * Module variables.\r\n * @private\r\n */\r\n\r\nvar DOUBLE_SPACE_REGEXP = /\\x20{2}/g\r\nvar NEWLINE_REGEXP = /\\n/g\r\n\r\n/* istanbul ignore next */\r\nvar defer = typeof setImmediate === 'function'\r\n  ? setImmediate\r\n  : function (fn) { process.nextTick(fn.bind.apply(fn, arguments)) }\r\nvar isFinished = onFinished.isFinished\r\n\r\n/**\r\n * Create a minimal HTML document.\r\n *\r\n * @param {string} message\r\n * @private\r\n */\r\n\r\nfunction createHtmlDocument (message) {\r\n  var body = escapeHtml(message)\r\n    .replace(NEWLINE_REGEXP, '<br>')\r\n    .replace(DOUBLE_SPACE_REGEXP, ' &nbsp;')\r\n\r\n  return '<!DOCTYPE html>\\n' +\r\n    '<html lang=\"en\">\\n' +\r\n    '<head>\\n' +\r\n    '<meta charset=\"utf-8\">\\n' +\r\n    '<title>Error</title>\\n' +\r\n    '</head>\\n' +\r\n    '<body>\\n' +\r\n    '<pre>' + body + '</pre>\\n' +\r\n    '</body>\\n' +\r\n    '</html>\\n'\r\n}\r\n\r\n/**\r\n * Module exports.\r\n * @public\r\n */\r\n\r\nmodule.exports = finalhandler\r\n\r\n/**\r\n * Create a function to handle the final response.\r\n *\r\n * @param {Request} req\r\n * @param {Response} res\r\n * @param {Object} [options]\r\n * @return {Function}\r\n * @public\r\n */\r\n\r\nfunction finalhandler (req, res, options) {\r\n  var opts = options || {}\r\n\r\n  // get environment\r\n  var env = opts.env || process.env.NODE_ENV || 'development'\r\n\r\n  // get error callback\r\n  var onerror = opts.onerror\r\n\r\n  return function (err) {\r\n    var headers\r\n    var msg\r\n    var status\r\n\r\n    // ignore 404 on in-flight response\r\n    if (!err && headersSent(res)) {\r\n      debug('cannot 404 after headers sent')\r\n      return\r\n    }\r\n\r\n    // unhandled error\r\n    if (err) {\r\n      // respect status code from error\r\n      status = getErrorStatusCode(err)\r\n\r\n      if (status === undefined) {\r\n        // fallback to status code on response\r\n        status = getResponseStatusCode(res)\r\n      } else {\r\n        // respect headers from error\r\n        headers = getErrorHeaders(err)\r\n      }\r\n\r\n      // get error message\r\n      msg = getErrorMessage(err, status, env)\r\n    } else {\r\n      // not found\r\n      status = 404\r\n      msg = 'Cannot ' + req.method + ' ' + encodeUrl(getResourceName(req))\r\n    }\r\n\r\n    debug('default %s', status)\r\n\r\n    // schedule onerror callback\r\n    if (err && onerror) {\r\n      defer(onerror, err, req, res)\r\n    }\r\n\r\n    // cannot actually respond\r\n    if (headersSent(res)) {\r\n      debug('cannot %d after headers sent', status)\r\n      req.socket.destroy()\r\n      return\r\n    }\r\n\r\n    // send response\r\n    send(req, res, status, headers, msg)\r\n  }\r\n}\r\n\r\n/**\r\n * Get headers from Error object.\r\n *\r\n * @param {Error} err\r\n * @return {object}\r\n * @private\r\n */\r\n\r\nfunction getErrorHeaders (err) {\r\n  if (!err.headers || typeof err.headers !== 'object') {\r\n    return undefined\r\n  }\r\n\r\n  var headers = Object.create(null)\r\n  var keys = Object.keys(err.headers)\r\n\r\n  for (var i = 0; i < keys.length; i++) {\r\n    var key = keys[i]\r\n    headers[key] = err.headers[key]\r\n  }\r\n\r\n  return headers\r\n}\r\n\r\n/**\r\n * Get message from Error object, fallback to status message.\r\n *\r\n * @param {Error} err\r\n * @param {number} status\r\n * @param {string} env\r\n * @return {string}\r\n * @private\r\n */\r\n\r\nfunction getErrorMessage (err, status, env) {\r\n  var msg\r\n\r\n  if (env !== 'production') {\r\n    // use err.stack, which typically includes err.message\r\n    msg = err.stack\r\n\r\n    // fallback to err.toString() when possible\r\n    if (!msg && typeof err.toString === 'function') {\r\n      msg = err.toString()\r\n    }\r\n  }\r\n\r\n  return msg || statuses[status]\r\n}\r\n\r\n/**\r\n * Get status code from Error object.\r\n *\r\n * @param {Error} err\r\n * @return {number}\r\n * @private\r\n */\r\n\r\nfunction getErrorStatusCode (err) {\r\n  // check err.status\r\n  if (typeof err.status === 'number' && err.status >= 400 && err.status < 600) {\r\n    return err.status\r\n  }\r\n\r\n  // check err.statusCode\r\n  if (typeof err.statusCode === 'number' && err.statusCode >= 400 && err.statusCode < 600) {\r\n    return err.statusCode\r\n  }\r\n\r\n  return undefined\r\n}\r\n\r\n/**\r\n * Get resource name for the request.\r\n *\r\n * This is typically just the original pathname of the request\r\n * but will fallback to \"resource\" is that cannot be determined.\r\n *\r\n * @param {IncomingMessage} req\r\n * @return {string}\r\n * @private\r\n */\r\n\r\nfunction getResourceName (req) {\r\n  try {\r\n    return parseUrl.original(req).pathname\r\n  } catch (e) {\r\n    return 'resource'\r\n  }\r\n}\r\n\r\n/**\r\n * Get status code from response.\r\n *\r\n * @param {OutgoingMessage} res\r\n * @return {number}\r\n * @private\r\n */\r\n\r\nfunction getResponseStatusCode (res) {\r\n  var status = res.statusCode\r\n\r\n  // default status code to 500 if outside valid range\r\n  if (typeof status !== 'number' || status < 400 || status > 599) {\r\n    status = 500\r\n  }\r\n\r\n  return status\r\n}\r\n\r\n/**\r\n * Determine if the response headers have been sent.\r\n *\r\n * @param {object} res\r\n * @returns {boolean}\r\n * @private\r\n */\r\n\r\nfunction headersSent (res) {\r\n  return typeof res.headersSent !== 'boolean'\r\n    ? Boolean(res._header)\r\n    : res.headersSent\r\n}\r\n\r\n/**\r\n * Send response.\r\n *\r\n * @param {IncomingMessage} req\r\n * @param {OutgoingMessage} res\r\n * @param {number} status\r\n * @param {object} headers\r\n * @param {string} message\r\n * @private\r\n */\r\n\r\nfunction send (req, res, status, headers, message) {\r\n  function write () {\r\n    // response body\r\n    var body = createHtmlDocument(message)\r\n\r\n    // response status\r\n    res.statusCode = status\r\n    res.statusMessage = statuses[status]\r\n\r\n    // response headers\r\n    setHeaders(res, headers)\r\n\r\n    // security headers\r\n    res.setHeader('Content-Security-Policy', \"default-src 'none'\")\r\n    res.setHeader('X-Content-Type-Options', 'nosniff')\r\n\r\n    // standard headers\r\n    res.setHeader('Content-Type', 'text/html; charset=utf-8')\r\n    res.setHeader('Content-Length', Buffer.byteLength(body, 'utf8'))\r\n\r\n    if (req.method === 'HEAD') {\r\n      res.end()\r\n      return\r\n    }\r\n\r\n    res.end(body, 'utf8')\r\n  }\r\n\r\n  if (isFinished(req)) {\r\n    write()\r\n    return\r\n  }\r\n\r\n  // unpipe everything from the request\r\n  unpipe(req)\r\n\r\n  // flush the request\r\n  onFinished(req, write)\r\n  req.resume()\r\n}\r\n\r\n/**\r\n * Set response headers from an object.\r\n *\r\n * @param {OutgoingMessage} res\r\n * @param {object} headers\r\n * @private\r\n */\r\n\r\nfunction setHeaders (res, headers) {\r\n  if (!headers) {\r\n    return\r\n  }\r\n\r\n  var keys = Object.keys(headers)\r\n  for (var i = 0; i < keys.length; i++) {\r\n    var key = keys[i]\r\n    res.setHeader(key, headers[key])\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}