{"ast":null,"code":"/**\r\n * Module dependencies.\r\n */\nvar crypto = require('crypto');\n/**\r\n * Sign the given `val` with `secret`.\r\n *\r\n * @param {String} val\r\n * @param {String} secret\r\n * @return {String}\r\n * @api private\r\n */\n\n\nexports.sign = function (val, secret) {\n  if ('string' != typeof val) throw new TypeError(\"Cookie value must be provided as a string.\");\n  if ('string' != typeof secret) throw new TypeError(\"Secret string must be provided.\");\n  return val + '.' + crypto.createHmac('sha256', secret).update(val).digest('base64').replace(/\\=+$/, '');\n};\n/**\r\n * Unsign and decode the given `val` with `secret`,\r\n * returning `false` if the signature is invalid.\r\n *\r\n * @param {String} val\r\n * @param {String} secret\r\n * @return {String|Boolean}\r\n * @api private\r\n */\n\n\nexports.unsign = function (val, secret) {\n  if ('string' != typeof val) throw new TypeError(\"Signed cookie string must be provided.\");\n  if ('string' != typeof secret) throw new TypeError(\"Secret string must be provided.\");\n  var str = val.slice(0, val.lastIndexOf('.')),\n      mac = exports.sign(str, secret);\n  return sha1(mac) == sha1(val) ? str : false;\n};\n/**\r\n * Private\r\n */\n\n\nfunction sha1(str) {\n  return crypto.createHash('sha1').update(str).digest('hex');\n}","map":{"version":3,"sources":["D:/Work/Testes/react-crud-test/frontend/node_modules/cookie-signature/index.js"],"names":["crypto","require","exports","sign","val","secret","TypeError","createHmac","update","digest","replace","unsign","str","slice","lastIndexOf","mac","sha1","createHash"],"mappings":"AAAA;AACA;AACA;AAEA,IAAIA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAApB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAC,OAAO,CAACC,IAAR,GAAe,UAASC,GAAT,EAAcC,MAAd,EAAqB;AAClC,MAAI,YAAY,OAAOD,GAAvB,EAA4B,MAAM,IAAIE,SAAJ,CAAc,4CAAd,CAAN;AAC5B,MAAI,YAAY,OAAOD,MAAvB,EAA+B,MAAM,IAAIC,SAAJ,CAAc,iCAAd,CAAN;AAC/B,SAAOF,GAAG,GAAG,GAAN,GAAYJ,MAAM,CACtBO,UADgB,CACL,QADK,EACKF,MADL,EAEhBG,MAFgB,CAETJ,GAFS,EAGhBK,MAHgB,CAGT,QAHS,EAIhBC,OAJgB,CAIR,MAJQ,EAIA,EAJA,CAAnB;AAKD,CARD;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAR,OAAO,CAACS,MAAR,GAAiB,UAASP,GAAT,EAAcC,MAAd,EAAqB;AACpC,MAAI,YAAY,OAAOD,GAAvB,EAA4B,MAAM,IAAIE,SAAJ,CAAc,wCAAd,CAAN;AAC5B,MAAI,YAAY,OAAOD,MAAvB,EAA+B,MAAM,IAAIC,SAAJ,CAAc,iCAAd,CAAN;AAC/B,MAAIM,GAAG,GAAGR,GAAG,CAACS,KAAJ,CAAU,CAAV,EAAaT,GAAG,CAACU,WAAJ,CAAgB,GAAhB,CAAb,CAAV;AAAA,MACIC,GAAG,GAAGb,OAAO,CAACC,IAAR,CAAaS,GAAb,EAAkBP,MAAlB,CADV;AAGA,SAAOW,IAAI,CAACD,GAAD,CAAJ,IAAaC,IAAI,CAACZ,GAAD,CAAjB,GAAyBQ,GAAzB,GAA+B,KAAtC;AACD,CAPD;AASA;AACA;AACA;;;AAEA,SAASI,IAAT,CAAcJ,GAAd,EAAkB;AAChB,SAAOZ,MAAM,CAACiB,UAAP,CAAkB,MAAlB,EAA0BT,MAA1B,CAAiCI,GAAjC,EAAsCH,MAAtC,CAA6C,KAA7C,CAAP;AACD","sourcesContent":["/**\r\n * Module dependencies.\r\n */\r\n\r\nvar crypto = require('crypto');\r\n\r\n/**\r\n * Sign the given `val` with `secret`.\r\n *\r\n * @param {String} val\r\n * @param {String} secret\r\n * @return {String}\r\n * @api private\r\n */\r\n\r\nexports.sign = function(val, secret){\r\n  if ('string' != typeof val) throw new TypeError(\"Cookie value must be provided as a string.\");\r\n  if ('string' != typeof secret) throw new TypeError(\"Secret string must be provided.\");\r\n  return val + '.' + crypto\r\n    .createHmac('sha256', secret)\r\n    .update(val)\r\n    .digest('base64')\r\n    .replace(/\\=+$/, '');\r\n};\r\n\r\n/**\r\n * Unsign and decode the given `val` with `secret`,\r\n * returning `false` if the signature is invalid.\r\n *\r\n * @param {String} val\r\n * @param {String} secret\r\n * @return {String|Boolean}\r\n * @api private\r\n */\r\n\r\nexports.unsign = function(val, secret){\r\n  if ('string' != typeof val) throw new TypeError(\"Signed cookie string must be provided.\");\r\n  if ('string' != typeof secret) throw new TypeError(\"Secret string must be provided.\");\r\n  var str = val.slice(0, val.lastIndexOf('.'))\r\n    , mac = exports.sign(str, secret);\r\n  \r\n  return sha1(mac) == sha1(val) ? str : false;\r\n};\r\n\r\n/**\r\n * Private\r\n */\r\n\r\nfunction sha1(str){\r\n  return crypto.createHash('sha1').update(str).digest('hex');\r\n}\r\n"]},"metadata":{},"sourceType":"script"}