{"ast":null,"code":"/*!\r\n * express\r\n * Copyright(c) 2009-2013 TJ Holowaychuk\r\n * Copyright(c) 2013 Roman Shtylman\r\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\r\n * MIT Licensed\r\n */\n'use strict';\n/**\r\n * Module dependencies.\r\n * @private\r\n */\n\nvar accepts = require('accepts');\n\nvar deprecate = require('depd')('express');\n\nvar isIP = require('net').isIP;\n\nvar typeis = require('type-is');\n\nvar http = require('http');\n\nvar fresh = require('fresh');\n\nvar parseRange = require('range-parser');\n\nvar parse = require('parseurl');\n\nvar proxyaddr = require('proxy-addr');\n/**\r\n * Request prototype.\r\n * @public\r\n */\n\n\nvar req = Object.create(http.IncomingMessage.prototype);\n/**\r\n * Module exports.\r\n * @public\r\n */\n\nmodule.exports = req;\n/**\r\n * Return request header.\r\n *\r\n * The `Referrer` header field is special-cased,\r\n * both `Referrer` and `Referer` are interchangeable.\r\n *\r\n * Examples:\r\n *\r\n *     req.get('Content-Type');\r\n *     // => \"text/plain\"\r\n *\r\n *     req.get('content-type');\r\n *     // => \"text/plain\"\r\n *\r\n *     req.get('Something');\r\n *     // => undefined\r\n *\r\n * Aliased as `req.header()`.\r\n *\r\n * @param {String} name\r\n * @return {String}\r\n * @public\r\n */\n\nreq.get = req.header = function header(name) {\n  if (!name) {\n    throw new TypeError('name argument is required to req.get');\n  }\n\n  if (typeof name !== 'string') {\n    throw new TypeError('name must be a string to req.get');\n  }\n\n  var lc = name.toLowerCase();\n\n  switch (lc) {\n    case 'referer':\n    case 'referrer':\n      return this.headers.referrer || this.headers.referer;\n\n    default:\n      return this.headers[lc];\n  }\n};\n/**\r\n * To do: update docs.\r\n *\r\n * Check if the given `type(s)` is acceptable, returning\r\n * the best match when true, otherwise `undefined`, in which\r\n * case you should respond with 406 \"Not Acceptable\".\r\n *\r\n * The `type` value may be a single MIME type string\r\n * such as \"application/json\", an extension name\r\n * such as \"json\", a comma-delimited list such as \"json, html, text/plain\",\r\n * an argument list such as `\"json\", \"html\", \"text/plain\"`,\r\n * or an array `[\"json\", \"html\", \"text/plain\"]`. When a list\r\n * or array is given, the _best_ match, if any is returned.\r\n *\r\n * Examples:\r\n *\r\n *     // Accept: text/html\r\n *     req.accepts('html');\r\n *     // => \"html\"\r\n *\r\n *     // Accept: text/*, application/json\r\n *     req.accepts('html');\r\n *     // => \"html\"\r\n *     req.accepts('text/html');\r\n *     // => \"text/html\"\r\n *     req.accepts('json, text');\r\n *     // => \"json\"\r\n *     req.accepts('application/json');\r\n *     // => \"application/json\"\r\n *\r\n *     // Accept: text/*, application/json\r\n *     req.accepts('image/png');\r\n *     req.accepts('png');\r\n *     // => undefined\r\n *\r\n *     // Accept: text/*;q=.5, application/json\r\n *     req.accepts(['html', 'json']);\r\n *     req.accepts('html', 'json');\r\n *     req.accepts('html, json');\r\n *     // => \"json\"\r\n *\r\n * @param {String|Array} type(s)\r\n * @return {String|Array|Boolean}\r\n * @public\r\n */\n\n\nreq.accepts = function () {\n  var accept = accepts(this);\n  return accept.types.apply(accept, arguments);\n};\n/**\r\n * Check if the given `encoding`s are accepted.\r\n *\r\n * @param {String} ...encoding\r\n * @return {String|Array}\r\n * @public\r\n */\n\n\nreq.acceptsEncodings = function () {\n  var accept = accepts(this);\n  return accept.encodings.apply(accept, arguments);\n};\n\nreq.acceptsEncoding = deprecate.function(req.acceptsEncodings, 'req.acceptsEncoding: Use acceptsEncodings instead');\n/**\r\n * Check if the given `charset`s are acceptable,\r\n * otherwise you should respond with 406 \"Not Acceptable\".\r\n *\r\n * @param {String} ...charset\r\n * @return {String|Array}\r\n * @public\r\n */\n\nreq.acceptsCharsets = function () {\n  var accept = accepts(this);\n  return accept.charsets.apply(accept, arguments);\n};\n\nreq.acceptsCharset = deprecate.function(req.acceptsCharsets, 'req.acceptsCharset: Use acceptsCharsets instead');\n/**\r\n * Check if the given `lang`s are acceptable,\r\n * otherwise you should respond with 406 \"Not Acceptable\".\r\n *\r\n * @param {String} ...lang\r\n * @return {String|Array}\r\n * @public\r\n */\n\nreq.acceptsLanguages = function () {\n  var accept = accepts(this);\n  return accept.languages.apply(accept, arguments);\n};\n\nreq.acceptsLanguage = deprecate.function(req.acceptsLanguages, 'req.acceptsLanguage: Use acceptsLanguages instead');\n/**\r\n * Parse Range header field, capping to the given `size`.\r\n *\r\n * Unspecified ranges such as \"0-\" require knowledge of your resource length. In\r\n * the case of a byte range this is of course the total number of bytes. If the\r\n * Range header field is not given `undefined` is returned, `-1` when unsatisfiable,\r\n * and `-2` when syntactically invalid.\r\n *\r\n * When ranges are returned, the array has a \"type\" property which is the type of\r\n * range that is required (most commonly, \"bytes\"). Each array element is an object\r\n * with a \"start\" and \"end\" property for the portion of the range.\r\n *\r\n * The \"combine\" option can be set to `true` and overlapping & adjacent ranges\r\n * will be combined into a single range.\r\n *\r\n * NOTE: remember that ranges are inclusive, so for example \"Range: users=0-3\"\r\n * should respond with 4 users when available, not 3.\r\n *\r\n * @param {number} size\r\n * @param {object} [options]\r\n * @param {boolean} [options.combine=false]\r\n * @return {number|array}\r\n * @public\r\n */\n\nreq.range = function range(size, options) {\n  var range = this.get('Range');\n  if (!range) return;\n  return parseRange(size, range, options);\n};\n/**\r\n * Return the value of param `name` when present or `defaultValue`.\r\n *\r\n *  - Checks route placeholders, ex: _/user/:id_\r\n *  - Checks body params, ex: id=12, {\"id\":12}\r\n *  - Checks query string params, ex: ?id=12\r\n *\r\n * To utilize request bodies, `req.body`\r\n * should be an object. This can be done by using\r\n * the `bodyParser()` middleware.\r\n *\r\n * @param {String} name\r\n * @param {Mixed} [defaultValue]\r\n * @return {String}\r\n * @public\r\n */\n\n\nreq.param = function param(name, defaultValue) {\n  var params = this.params || {};\n  var body = this.body || {};\n  var query = this.query || {};\n  var args = arguments.length === 1 ? 'name' : 'name, default';\n  deprecate('req.param(' + args + '): Use req.params, req.body, or req.query instead');\n  if (null != params[name] && params.hasOwnProperty(name)) return params[name];\n  if (null != body[name]) return body[name];\n  if (null != query[name]) return query[name];\n  return defaultValue;\n};\n/**\r\n * Check if the incoming request contains the \"Content-Type\"\r\n * header field, and it contains the given mime `type`.\r\n *\r\n * Examples:\r\n *\r\n *      // With Content-Type: text/html; charset=utf-8\r\n *      req.is('html');\r\n *      req.is('text/html');\r\n *      req.is('text/*');\r\n *      // => true\r\n *\r\n *      // When Content-Type is application/json\r\n *      req.is('json');\r\n *      req.is('application/json');\r\n *      req.is('application/*');\r\n *      // => true\r\n *\r\n *      req.is('html');\r\n *      // => false\r\n *\r\n * @param {String|Array} types...\r\n * @return {String|false|null}\r\n * @public\r\n */\n\n\nreq.is = function is(types) {\n  var arr = types; // support flattened arguments\n\n  if (!Array.isArray(types)) {\n    arr = new Array(arguments.length);\n\n    for (var i = 0; i < arr.length; i++) {\n      arr[i] = arguments[i];\n    }\n  }\n\n  return typeis(this, arr);\n};\n/**\r\n * Return the protocol string \"http\" or \"https\"\r\n * when requested with TLS. When the \"trust proxy\"\r\n * setting trusts the socket address, the\r\n * \"X-Forwarded-Proto\" header field will be trusted\r\n * and used if present.\r\n *\r\n * If you're running behind a reverse proxy that\r\n * supplies https for you this may be enabled.\r\n *\r\n * @return {String}\r\n * @public\r\n */\n\n\ndefineGetter(req, 'protocol', function protocol() {\n  var proto = this.connection.encrypted ? 'https' : 'http';\n  var trust = this.app.get('trust proxy fn');\n\n  if (!trust(this.connection.remoteAddress, 0)) {\n    return proto;\n  } // Note: X-Forwarded-Proto is normally only ever a\n  //       single value, but this is to be safe.\n\n\n  var header = this.get('X-Forwarded-Proto') || proto;\n  var index = header.indexOf(',');\n  return index !== -1 ? header.substring(0, index).trim() : header.trim();\n});\n/**\r\n * Short-hand for:\r\n *\r\n *    req.protocol === 'https'\r\n *\r\n * @return {Boolean}\r\n * @public\r\n */\n\ndefineGetter(req, 'secure', function secure() {\n  return this.protocol === 'https';\n});\n/**\r\n * Return the remote address from the trusted proxy.\r\n *\r\n * The is the remote address on the socket unless\r\n * \"trust proxy\" is set.\r\n *\r\n * @return {String}\r\n * @public\r\n */\n\ndefineGetter(req, 'ip', function ip() {\n  var trust = this.app.get('trust proxy fn');\n  return proxyaddr(this, trust);\n});\n/**\r\n * When \"trust proxy\" is set, trusted proxy addresses + client.\r\n *\r\n * For example if the value were \"client, proxy1, proxy2\"\r\n * you would receive the array `[\"client\", \"proxy1\", \"proxy2\"]`\r\n * where \"proxy2\" is the furthest down-stream and \"proxy1\" and\r\n * \"proxy2\" were trusted.\r\n *\r\n * @return {Array}\r\n * @public\r\n */\n\ndefineGetter(req, 'ips', function ips() {\n  var trust = this.app.get('trust proxy fn');\n  var addrs = proxyaddr.all(this, trust); // reverse the order (to farthest -> closest)\n  // and remove socket address\n\n  addrs.reverse().pop();\n  return addrs;\n});\n/**\r\n * Return subdomains as an array.\r\n *\r\n * Subdomains are the dot-separated parts of the host before the main domain of\r\n * the app. By default, the domain of the app is assumed to be the last two\r\n * parts of the host. This can be changed by setting \"subdomain offset\".\r\n *\r\n * For example, if the domain is \"tobi.ferrets.example.com\":\r\n * If \"subdomain offset\" is not set, req.subdomains is `[\"ferrets\", \"tobi\"]`.\r\n * If \"subdomain offset\" is 3, req.subdomains is `[\"tobi\"]`.\r\n *\r\n * @return {Array}\r\n * @public\r\n */\n\ndefineGetter(req, 'subdomains', function subdomains() {\n  var hostname = this.hostname;\n  if (!hostname) return [];\n  var offset = this.app.get('subdomain offset');\n  var subdomains = !isIP(hostname) ? hostname.split('.').reverse() : [hostname];\n  return subdomains.slice(offset);\n});\n/**\r\n * Short-hand for `url.parse(req.url).pathname`.\r\n *\r\n * @return {String}\r\n * @public\r\n */\n\ndefineGetter(req, 'path', function path() {\n  return parse(this).pathname;\n});\n/**\r\n * Parse the \"Host\" header field to a hostname.\r\n *\r\n * When the \"trust proxy\" setting trusts the socket\r\n * address, the \"X-Forwarded-Host\" header field will\r\n * be trusted.\r\n *\r\n * @return {String}\r\n * @public\r\n */\n\ndefineGetter(req, 'hostname', function hostname() {\n  var trust = this.app.get('trust proxy fn');\n  var host = this.get('X-Forwarded-Host');\n\n  if (!host || !trust(this.connection.remoteAddress, 0)) {\n    host = this.get('Host');\n  } else if (host.indexOf(',') !== -1) {\n    // Note: X-Forwarded-Host is normally only ever a\n    //       single value, but this is to be safe.\n    host = host.substring(0, host.indexOf(',')).trimRight();\n  }\n\n  if (!host) return; // IPv6 literal support\n\n  var offset = host[0] === '[' ? host.indexOf(']') + 1 : 0;\n  var index = host.indexOf(':', offset);\n  return index !== -1 ? host.substring(0, index) : host;\n}); // TODO: change req.host to return host in next major\n\ndefineGetter(req, 'host', deprecate.function(function host() {\n  return this.hostname;\n}, 'req.host: Use req.hostname instead'));\n/**\r\n * Check if the request is fresh, aka\r\n * Last-Modified and/or the ETag\r\n * still match.\r\n *\r\n * @return {Boolean}\r\n * @public\r\n */\n\ndefineGetter(req, 'fresh', function () {\n  var method = this.method;\n  var res = this.res;\n  var status = res.statusCode; // GET or HEAD for weak freshness validation only\n\n  if ('GET' !== method && 'HEAD' !== method) return false; // 2xx or 304 as per rfc2616 14.26\n\n  if (status >= 200 && status < 300 || 304 === status) {\n    return fresh(this.headers, {\n      'etag': res.get('ETag'),\n      'last-modified': res.get('Last-Modified')\n    });\n  }\n\n  return false;\n});\n/**\r\n * Check if the request is stale, aka\r\n * \"Last-Modified\" and / or the \"ETag\" for the\r\n * resource has changed.\r\n *\r\n * @return {Boolean}\r\n * @public\r\n */\n\ndefineGetter(req, 'stale', function stale() {\n  return !this.fresh;\n});\n/**\r\n * Check if the request was an _XMLHttpRequest_.\r\n *\r\n * @return {Boolean}\r\n * @public\r\n */\n\ndefineGetter(req, 'xhr', function xhr() {\n  var val = this.get('X-Requested-With') || '';\n  return val.toLowerCase() === 'xmlhttprequest';\n});\n/**\r\n * Helper function for creating a getter on an object.\r\n *\r\n * @param {Object} obj\r\n * @param {String} name\r\n * @param {Function} getter\r\n * @private\r\n */\n\nfunction defineGetter(obj, name, getter) {\n  Object.defineProperty(obj, name, {\n    configurable: true,\n    enumerable: true,\n    get: getter\n  });\n}","map":{"version":3,"sources":["D:/Work/Testes/react-crud-test/frontend/node_modules/express/lib/request.js"],"names":["accepts","require","deprecate","isIP","typeis","http","fresh","parseRange","parse","proxyaddr","req","Object","create","IncomingMessage","prototype","module","exports","get","header","name","TypeError","lc","toLowerCase","headers","referrer","referer","accept","types","apply","arguments","acceptsEncodings","encodings","acceptsEncoding","function","acceptsCharsets","charsets","acceptsCharset","acceptsLanguages","languages","acceptsLanguage","range","size","options","param","defaultValue","params","body","query","args","length","hasOwnProperty","is","arr","Array","isArray","i","defineGetter","protocol","proto","connection","encrypted","trust","app","remoteAddress","index","indexOf","substring","trim","secure","ip","ips","addrs","all","reverse","pop","subdomains","hostname","offset","split","slice","path","pathname","host","trimRight","method","res","status","statusCode","stale","xhr","val","obj","getter","defineProperty","configurable","enumerable"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;;AAEA,IAAIA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAArB;;AACA,IAAIC,SAAS,GAAGD,OAAO,CAAC,MAAD,CAAP,CAAgB,SAAhB,CAAhB;;AACA,IAAIE,IAAI,GAAGF,OAAO,CAAC,KAAD,CAAP,CAAeE,IAA1B;;AACA,IAAIC,MAAM,GAAGH,OAAO,CAAC,SAAD,CAApB;;AACA,IAAII,IAAI,GAAGJ,OAAO,CAAC,MAAD,CAAlB;;AACA,IAAIK,KAAK,GAAGL,OAAO,CAAC,OAAD,CAAnB;;AACA,IAAIM,UAAU,GAAGN,OAAO,CAAC,cAAD,CAAxB;;AACA,IAAIO,KAAK,GAAGP,OAAO,CAAC,UAAD,CAAnB;;AACA,IAAIQ,SAAS,GAAGR,OAAO,CAAC,YAAD,CAAvB;AAEA;AACA;AACA;AACA;;;AAEA,IAAIS,GAAG,GAAGC,MAAM,CAACC,MAAP,CAAcP,IAAI,CAACQ,eAAL,CAAqBC,SAAnC,CAAV;AAEA;AACA;AACA;AACA;;AAEAC,MAAM,CAACC,OAAP,GAAiBN,GAAjB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAA,GAAG,CAACO,GAAJ,GACAP,GAAG,CAACQ,MAAJ,GAAa,SAASA,MAAT,CAAgBC,IAAhB,EAAsB;AACjC,MAAI,CAACA,IAAL,EAAW;AACT,UAAM,IAAIC,SAAJ,CAAc,sCAAd,CAAN;AACD;;AAED,MAAI,OAAOD,IAAP,KAAgB,QAApB,EAA8B;AAC5B,UAAM,IAAIC,SAAJ,CAAc,kCAAd,CAAN;AACD;;AAED,MAAIC,EAAE,GAAGF,IAAI,CAACG,WAAL,EAAT;;AAEA,UAAQD,EAAR;AACE,SAAK,SAAL;AACA,SAAK,UAAL;AACE,aAAO,KAAKE,OAAL,CAAaC,QAAb,IACF,KAAKD,OAAL,CAAaE,OADlB;;AAEF;AACE,aAAO,KAAKF,OAAL,CAAaF,EAAb,CAAP;AANJ;AAQD,CApBD;AAsBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAX,GAAG,CAACV,OAAJ,GAAc,YAAU;AACtB,MAAI0B,MAAM,GAAG1B,OAAO,CAAC,IAAD,CAApB;AACA,SAAO0B,MAAM,CAACC,KAAP,CAAaC,KAAb,CAAmBF,MAAnB,EAA2BG,SAA3B,CAAP;AACD,CAHD;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAnB,GAAG,CAACoB,gBAAJ,GAAuB,YAAU;AAC/B,MAAIJ,MAAM,GAAG1B,OAAO,CAAC,IAAD,CAApB;AACA,SAAO0B,MAAM,CAACK,SAAP,CAAiBH,KAAjB,CAAuBF,MAAvB,EAA+BG,SAA/B,CAAP;AACD,CAHD;;AAKAnB,GAAG,CAACsB,eAAJ,GAAsB9B,SAAS,CAAC+B,QAAV,CAAmBvB,GAAG,CAACoB,gBAAvB,EACpB,mDADoB,CAAtB;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEApB,GAAG,CAACwB,eAAJ,GAAsB,YAAU;AAC9B,MAAIR,MAAM,GAAG1B,OAAO,CAAC,IAAD,CAApB;AACA,SAAO0B,MAAM,CAACS,QAAP,CAAgBP,KAAhB,CAAsBF,MAAtB,EAA8BG,SAA9B,CAAP;AACD,CAHD;;AAKAnB,GAAG,CAAC0B,cAAJ,GAAqBlC,SAAS,CAAC+B,QAAV,CAAmBvB,GAAG,CAACwB,eAAvB,EACnB,iDADmB,CAArB;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAxB,GAAG,CAAC2B,gBAAJ,GAAuB,YAAU;AAC/B,MAAIX,MAAM,GAAG1B,OAAO,CAAC,IAAD,CAApB;AACA,SAAO0B,MAAM,CAACY,SAAP,CAAiBV,KAAjB,CAAuBF,MAAvB,EAA+BG,SAA/B,CAAP;AACD,CAHD;;AAKAnB,GAAG,CAAC6B,eAAJ,GAAsBrC,SAAS,CAAC+B,QAAV,CAAmBvB,GAAG,CAAC2B,gBAAvB,EACpB,mDADoB,CAAtB;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA3B,GAAG,CAAC8B,KAAJ,GAAY,SAASA,KAAT,CAAeC,IAAf,EAAqBC,OAArB,EAA8B;AACxC,MAAIF,KAAK,GAAG,KAAKvB,GAAL,CAAS,OAAT,CAAZ;AACA,MAAI,CAACuB,KAAL,EAAY;AACZ,SAAOjC,UAAU,CAACkC,IAAD,EAAOD,KAAP,EAAcE,OAAd,CAAjB;AACD,CAJD;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAhC,GAAG,CAACiC,KAAJ,GAAY,SAASA,KAAT,CAAexB,IAAf,EAAqByB,YAArB,EAAmC;AAC7C,MAAIC,MAAM,GAAG,KAAKA,MAAL,IAAe,EAA5B;AACA,MAAIC,IAAI,GAAG,KAAKA,IAAL,IAAa,EAAxB;AACA,MAAIC,KAAK,GAAG,KAAKA,KAAL,IAAc,EAA1B;AAEA,MAAIC,IAAI,GAAGnB,SAAS,CAACoB,MAAV,KAAqB,CAArB,GACP,MADO,GAEP,eAFJ;AAGA/C,EAAAA,SAAS,CAAC,eAAe8C,IAAf,GAAsB,mDAAvB,CAAT;AAEA,MAAI,QAAQH,MAAM,CAAC1B,IAAD,CAAd,IAAwB0B,MAAM,CAACK,cAAP,CAAsB/B,IAAtB,CAA5B,EAAyD,OAAO0B,MAAM,CAAC1B,IAAD,CAAb;AACzD,MAAI,QAAQ2B,IAAI,CAAC3B,IAAD,CAAhB,EAAwB,OAAO2B,IAAI,CAAC3B,IAAD,CAAX;AACxB,MAAI,QAAQ4B,KAAK,CAAC5B,IAAD,CAAjB,EAAyB,OAAO4B,KAAK,CAAC5B,IAAD,CAAZ;AAEzB,SAAOyB,YAAP;AACD,CAfD;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAlC,GAAG,CAACyC,EAAJ,GAAS,SAASA,EAAT,CAAYxB,KAAZ,EAAmB;AAC1B,MAAIyB,GAAG,GAAGzB,KAAV,CAD0B,CAG1B;;AACA,MAAI,CAAC0B,KAAK,CAACC,OAAN,CAAc3B,KAAd,CAAL,EAA2B;AACzByB,IAAAA,GAAG,GAAG,IAAIC,KAAJ,CAAUxB,SAAS,CAACoB,MAApB,CAAN;;AACA,SAAK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,GAAG,CAACH,MAAxB,EAAgCM,CAAC,EAAjC,EAAqC;AACnCH,MAAAA,GAAG,CAACG,CAAD,CAAH,GAAS1B,SAAS,CAAC0B,CAAD,CAAlB;AACD;AACF;;AAED,SAAOnD,MAAM,CAAC,IAAD,EAAOgD,GAAP,CAAb;AACD,CAZD;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAI,YAAY,CAAC9C,GAAD,EAAM,UAAN,EAAkB,SAAS+C,QAAT,GAAmB;AAC/C,MAAIC,KAAK,GAAG,KAAKC,UAAL,CAAgBC,SAAhB,GACR,OADQ,GAER,MAFJ;AAGA,MAAIC,KAAK,GAAG,KAAKC,GAAL,CAAS7C,GAAT,CAAa,gBAAb,CAAZ;;AAEA,MAAI,CAAC4C,KAAK,CAAC,KAAKF,UAAL,CAAgBI,aAAjB,EAAgC,CAAhC,CAAV,EAA8C;AAC5C,WAAOL,KAAP;AACD,GAR8C,CAU/C;AACA;;;AACA,MAAIxC,MAAM,GAAG,KAAKD,GAAL,CAAS,mBAAT,KAAiCyC,KAA9C;AACA,MAAIM,KAAK,GAAG9C,MAAM,CAAC+C,OAAP,CAAe,GAAf,CAAZ;AAEA,SAAOD,KAAK,KAAK,CAAC,CAAX,GACH9C,MAAM,CAACgD,SAAP,CAAiB,CAAjB,EAAoBF,KAApB,EAA2BG,IAA3B,EADG,GAEHjD,MAAM,CAACiD,IAAP,EAFJ;AAGD,CAlBW,CAAZ;AAoBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAX,YAAY,CAAC9C,GAAD,EAAM,QAAN,EAAgB,SAAS0D,MAAT,GAAiB;AAC3C,SAAO,KAAKX,QAAL,KAAkB,OAAzB;AACD,CAFW,CAAZ;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAD,YAAY,CAAC9C,GAAD,EAAM,IAAN,EAAY,SAAS2D,EAAT,GAAa;AACnC,MAAIR,KAAK,GAAG,KAAKC,GAAL,CAAS7C,GAAT,CAAa,gBAAb,CAAZ;AACA,SAAOR,SAAS,CAAC,IAAD,EAAOoD,KAAP,CAAhB;AACD,CAHW,CAAZ;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAL,YAAY,CAAC9C,GAAD,EAAM,KAAN,EAAa,SAAS4D,GAAT,GAAe;AACtC,MAAIT,KAAK,GAAG,KAAKC,GAAL,CAAS7C,GAAT,CAAa,gBAAb,CAAZ;AACA,MAAIsD,KAAK,GAAG9D,SAAS,CAAC+D,GAAV,CAAc,IAAd,EAAoBX,KAApB,CAAZ,CAFsC,CAItC;AACA;;AACAU,EAAAA,KAAK,CAACE,OAAN,GAAgBC,GAAhB;AAEA,SAAOH,KAAP;AACD,CATW,CAAZ;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAf,YAAY,CAAC9C,GAAD,EAAM,YAAN,EAAoB,SAASiE,UAAT,GAAsB;AACpD,MAAIC,QAAQ,GAAG,KAAKA,QAApB;AAEA,MAAI,CAACA,QAAL,EAAe,OAAO,EAAP;AAEf,MAAIC,MAAM,GAAG,KAAKf,GAAL,CAAS7C,GAAT,CAAa,kBAAb,CAAb;AACA,MAAI0D,UAAU,GAAG,CAACxE,IAAI,CAACyE,QAAD,CAAL,GACbA,QAAQ,CAACE,KAAT,CAAe,GAAf,EAAoBL,OAApB,EADa,GAEb,CAACG,QAAD,CAFJ;AAIA,SAAOD,UAAU,CAACI,KAAX,CAAiBF,MAAjB,CAAP;AACD,CAXW,CAAZ;AAaA;AACA;AACA;AACA;AACA;AACA;;AAEArB,YAAY,CAAC9C,GAAD,EAAM,MAAN,EAAc,SAASsE,IAAT,GAAgB;AACxC,SAAOxE,KAAK,CAAC,IAAD,CAAL,CAAYyE,QAAnB;AACD,CAFW,CAAZ;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAzB,YAAY,CAAC9C,GAAD,EAAM,UAAN,EAAkB,SAASkE,QAAT,GAAmB;AAC/C,MAAIf,KAAK,GAAG,KAAKC,GAAL,CAAS7C,GAAT,CAAa,gBAAb,CAAZ;AACA,MAAIiE,IAAI,GAAG,KAAKjE,GAAL,CAAS,kBAAT,CAAX;;AAEA,MAAI,CAACiE,IAAD,IAAS,CAACrB,KAAK,CAAC,KAAKF,UAAL,CAAgBI,aAAjB,EAAgC,CAAhC,CAAnB,EAAuD;AACrDmB,IAAAA,IAAI,GAAG,KAAKjE,GAAL,CAAS,MAAT,CAAP;AACD,GAFD,MAEO,IAAIiE,IAAI,CAACjB,OAAL,CAAa,GAAb,MAAsB,CAAC,CAA3B,EAA8B;AACnC;AACA;AACAiB,IAAAA,IAAI,GAAGA,IAAI,CAAChB,SAAL,CAAe,CAAf,EAAkBgB,IAAI,CAACjB,OAAL,CAAa,GAAb,CAAlB,EAAqCkB,SAArC,EAAP;AACD;;AAED,MAAI,CAACD,IAAL,EAAW,OAZoC,CAc/C;;AACA,MAAIL,MAAM,GAAGK,IAAI,CAAC,CAAD,CAAJ,KAAY,GAAZ,GACTA,IAAI,CAACjB,OAAL,CAAa,GAAb,IAAoB,CADX,GAET,CAFJ;AAGA,MAAID,KAAK,GAAGkB,IAAI,CAACjB,OAAL,CAAa,GAAb,EAAkBY,MAAlB,CAAZ;AAEA,SAAOb,KAAK,KAAK,CAAC,CAAX,GACHkB,IAAI,CAAChB,SAAL,CAAe,CAAf,EAAkBF,KAAlB,CADG,GAEHkB,IAFJ;AAGD,CAvBW,CAAZ,C,CAyBA;;AAEA1B,YAAY,CAAC9C,GAAD,EAAM,MAAN,EAAcR,SAAS,CAAC+B,QAAV,CAAmB,SAASiD,IAAT,GAAe;AAC1D,SAAO,KAAKN,QAAZ;AACD,CAFyB,EAEvB,oCAFuB,CAAd,CAAZ;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEApB,YAAY,CAAC9C,GAAD,EAAM,OAAN,EAAe,YAAU;AACnC,MAAI0E,MAAM,GAAG,KAAKA,MAAlB;AACA,MAAIC,GAAG,GAAG,KAAKA,GAAf;AACA,MAAIC,MAAM,GAAGD,GAAG,CAACE,UAAjB,CAHmC,CAKnC;;AACA,MAAI,UAAUH,MAAV,IAAoB,WAAWA,MAAnC,EAA2C,OAAO,KAAP,CANR,CAQnC;;AACA,MAAKE,MAAM,IAAI,GAAV,IAAiBA,MAAM,GAAG,GAA3B,IAAmC,QAAQA,MAA/C,EAAuD;AACrD,WAAOhF,KAAK,CAAC,KAAKiB,OAAN,EAAe;AACzB,cAAQ8D,GAAG,CAACpE,GAAJ,CAAQ,MAAR,CADiB;AAEzB,uBAAiBoE,GAAG,CAACpE,GAAJ,CAAQ,eAAR;AAFQ,KAAf,CAAZ;AAID;;AAED,SAAO,KAAP;AACD,CAjBW,CAAZ;AAmBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAuC,YAAY,CAAC9C,GAAD,EAAM,OAAN,EAAe,SAAS8E,KAAT,GAAgB;AACzC,SAAO,CAAC,KAAKlF,KAAb;AACD,CAFW,CAAZ;AAIA;AACA;AACA;AACA;AACA;AACA;;AAEAkD,YAAY,CAAC9C,GAAD,EAAM,KAAN,EAAa,SAAS+E,GAAT,GAAc;AACrC,MAAIC,GAAG,GAAG,KAAKzE,GAAL,CAAS,kBAAT,KAAgC,EAA1C;AACA,SAAOyE,GAAG,CAACpE,WAAJ,OAAsB,gBAA7B;AACD,CAHW,CAAZ;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASkC,YAAT,CAAsBmC,GAAtB,EAA2BxE,IAA3B,EAAiCyE,MAAjC,EAAyC;AACvCjF,EAAAA,MAAM,CAACkF,cAAP,CAAsBF,GAAtB,EAA2BxE,IAA3B,EAAiC;AAC/B2E,IAAAA,YAAY,EAAE,IADiB;AAE/BC,IAAAA,UAAU,EAAE,IAFmB;AAG/B9E,IAAAA,GAAG,EAAE2E;AAH0B,GAAjC;AAKD","sourcesContent":["/*!\r\n * express\r\n * Copyright(c) 2009-2013 TJ Holowaychuk\r\n * Copyright(c) 2013 Roman Shtylman\r\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\r\n * MIT Licensed\r\n */\r\n\r\n'use strict';\r\n\r\n/**\r\n * Module dependencies.\r\n * @private\r\n */\r\n\r\nvar accepts = require('accepts');\r\nvar deprecate = require('depd')('express');\r\nvar isIP = require('net').isIP;\r\nvar typeis = require('type-is');\r\nvar http = require('http');\r\nvar fresh = require('fresh');\r\nvar parseRange = require('range-parser');\r\nvar parse = require('parseurl');\r\nvar proxyaddr = require('proxy-addr');\r\n\r\n/**\r\n * Request prototype.\r\n * @public\r\n */\r\n\r\nvar req = Object.create(http.IncomingMessage.prototype)\r\n\r\n/**\r\n * Module exports.\r\n * @public\r\n */\r\n\r\nmodule.exports = req\r\n\r\n/**\r\n * Return request header.\r\n *\r\n * The `Referrer` header field is special-cased,\r\n * both `Referrer` and `Referer` are interchangeable.\r\n *\r\n * Examples:\r\n *\r\n *     req.get('Content-Type');\r\n *     // => \"text/plain\"\r\n *\r\n *     req.get('content-type');\r\n *     // => \"text/plain\"\r\n *\r\n *     req.get('Something');\r\n *     // => undefined\r\n *\r\n * Aliased as `req.header()`.\r\n *\r\n * @param {String} name\r\n * @return {String}\r\n * @public\r\n */\r\n\r\nreq.get =\r\nreq.header = function header(name) {\r\n  if (!name) {\r\n    throw new TypeError('name argument is required to req.get');\r\n  }\r\n\r\n  if (typeof name !== 'string') {\r\n    throw new TypeError('name must be a string to req.get');\r\n  }\r\n\r\n  var lc = name.toLowerCase();\r\n\r\n  switch (lc) {\r\n    case 'referer':\r\n    case 'referrer':\r\n      return this.headers.referrer\r\n        || this.headers.referer;\r\n    default:\r\n      return this.headers[lc];\r\n  }\r\n};\r\n\r\n/**\r\n * To do: update docs.\r\n *\r\n * Check if the given `type(s)` is acceptable, returning\r\n * the best match when true, otherwise `undefined`, in which\r\n * case you should respond with 406 \"Not Acceptable\".\r\n *\r\n * The `type` value may be a single MIME type string\r\n * such as \"application/json\", an extension name\r\n * such as \"json\", a comma-delimited list such as \"json, html, text/plain\",\r\n * an argument list such as `\"json\", \"html\", \"text/plain\"`,\r\n * or an array `[\"json\", \"html\", \"text/plain\"]`. When a list\r\n * or array is given, the _best_ match, if any is returned.\r\n *\r\n * Examples:\r\n *\r\n *     // Accept: text/html\r\n *     req.accepts('html');\r\n *     // => \"html\"\r\n *\r\n *     // Accept: text/*, application/json\r\n *     req.accepts('html');\r\n *     // => \"html\"\r\n *     req.accepts('text/html');\r\n *     // => \"text/html\"\r\n *     req.accepts('json, text');\r\n *     // => \"json\"\r\n *     req.accepts('application/json');\r\n *     // => \"application/json\"\r\n *\r\n *     // Accept: text/*, application/json\r\n *     req.accepts('image/png');\r\n *     req.accepts('png');\r\n *     // => undefined\r\n *\r\n *     // Accept: text/*;q=.5, application/json\r\n *     req.accepts(['html', 'json']);\r\n *     req.accepts('html', 'json');\r\n *     req.accepts('html, json');\r\n *     // => \"json\"\r\n *\r\n * @param {String|Array} type(s)\r\n * @return {String|Array|Boolean}\r\n * @public\r\n */\r\n\r\nreq.accepts = function(){\r\n  var accept = accepts(this);\r\n  return accept.types.apply(accept, arguments);\r\n};\r\n\r\n/**\r\n * Check if the given `encoding`s are accepted.\r\n *\r\n * @param {String} ...encoding\r\n * @return {String|Array}\r\n * @public\r\n */\r\n\r\nreq.acceptsEncodings = function(){\r\n  var accept = accepts(this);\r\n  return accept.encodings.apply(accept, arguments);\r\n};\r\n\r\nreq.acceptsEncoding = deprecate.function(req.acceptsEncodings,\r\n  'req.acceptsEncoding: Use acceptsEncodings instead');\r\n\r\n/**\r\n * Check if the given `charset`s are acceptable,\r\n * otherwise you should respond with 406 \"Not Acceptable\".\r\n *\r\n * @param {String} ...charset\r\n * @return {String|Array}\r\n * @public\r\n */\r\n\r\nreq.acceptsCharsets = function(){\r\n  var accept = accepts(this);\r\n  return accept.charsets.apply(accept, arguments);\r\n};\r\n\r\nreq.acceptsCharset = deprecate.function(req.acceptsCharsets,\r\n  'req.acceptsCharset: Use acceptsCharsets instead');\r\n\r\n/**\r\n * Check if the given `lang`s are acceptable,\r\n * otherwise you should respond with 406 \"Not Acceptable\".\r\n *\r\n * @param {String} ...lang\r\n * @return {String|Array}\r\n * @public\r\n */\r\n\r\nreq.acceptsLanguages = function(){\r\n  var accept = accepts(this);\r\n  return accept.languages.apply(accept, arguments);\r\n};\r\n\r\nreq.acceptsLanguage = deprecate.function(req.acceptsLanguages,\r\n  'req.acceptsLanguage: Use acceptsLanguages instead');\r\n\r\n/**\r\n * Parse Range header field, capping to the given `size`.\r\n *\r\n * Unspecified ranges such as \"0-\" require knowledge of your resource length. In\r\n * the case of a byte range this is of course the total number of bytes. If the\r\n * Range header field is not given `undefined` is returned, `-1` when unsatisfiable,\r\n * and `-2` when syntactically invalid.\r\n *\r\n * When ranges are returned, the array has a \"type\" property which is the type of\r\n * range that is required (most commonly, \"bytes\"). Each array element is an object\r\n * with a \"start\" and \"end\" property for the portion of the range.\r\n *\r\n * The \"combine\" option can be set to `true` and overlapping & adjacent ranges\r\n * will be combined into a single range.\r\n *\r\n * NOTE: remember that ranges are inclusive, so for example \"Range: users=0-3\"\r\n * should respond with 4 users when available, not 3.\r\n *\r\n * @param {number} size\r\n * @param {object} [options]\r\n * @param {boolean} [options.combine=false]\r\n * @return {number|array}\r\n * @public\r\n */\r\n\r\nreq.range = function range(size, options) {\r\n  var range = this.get('Range');\r\n  if (!range) return;\r\n  return parseRange(size, range, options);\r\n};\r\n\r\n/**\r\n * Return the value of param `name` when present or `defaultValue`.\r\n *\r\n *  - Checks route placeholders, ex: _/user/:id_\r\n *  - Checks body params, ex: id=12, {\"id\":12}\r\n *  - Checks query string params, ex: ?id=12\r\n *\r\n * To utilize request bodies, `req.body`\r\n * should be an object. This can be done by using\r\n * the `bodyParser()` middleware.\r\n *\r\n * @param {String} name\r\n * @param {Mixed} [defaultValue]\r\n * @return {String}\r\n * @public\r\n */\r\n\r\nreq.param = function param(name, defaultValue) {\r\n  var params = this.params || {};\r\n  var body = this.body || {};\r\n  var query = this.query || {};\r\n\r\n  var args = arguments.length === 1\r\n    ? 'name'\r\n    : 'name, default';\r\n  deprecate('req.param(' + args + '): Use req.params, req.body, or req.query instead');\r\n\r\n  if (null != params[name] && params.hasOwnProperty(name)) return params[name];\r\n  if (null != body[name]) return body[name];\r\n  if (null != query[name]) return query[name];\r\n\r\n  return defaultValue;\r\n};\r\n\r\n/**\r\n * Check if the incoming request contains the \"Content-Type\"\r\n * header field, and it contains the given mime `type`.\r\n *\r\n * Examples:\r\n *\r\n *      // With Content-Type: text/html; charset=utf-8\r\n *      req.is('html');\r\n *      req.is('text/html');\r\n *      req.is('text/*');\r\n *      // => true\r\n *\r\n *      // When Content-Type is application/json\r\n *      req.is('json');\r\n *      req.is('application/json');\r\n *      req.is('application/*');\r\n *      // => true\r\n *\r\n *      req.is('html');\r\n *      // => false\r\n *\r\n * @param {String|Array} types...\r\n * @return {String|false|null}\r\n * @public\r\n */\r\n\r\nreq.is = function is(types) {\r\n  var arr = types;\r\n\r\n  // support flattened arguments\r\n  if (!Array.isArray(types)) {\r\n    arr = new Array(arguments.length);\r\n    for (var i = 0; i < arr.length; i++) {\r\n      arr[i] = arguments[i];\r\n    }\r\n  }\r\n\r\n  return typeis(this, arr);\r\n};\r\n\r\n/**\r\n * Return the protocol string \"http\" or \"https\"\r\n * when requested with TLS. When the \"trust proxy\"\r\n * setting trusts the socket address, the\r\n * \"X-Forwarded-Proto\" header field will be trusted\r\n * and used if present.\r\n *\r\n * If you're running behind a reverse proxy that\r\n * supplies https for you this may be enabled.\r\n *\r\n * @return {String}\r\n * @public\r\n */\r\n\r\ndefineGetter(req, 'protocol', function protocol(){\r\n  var proto = this.connection.encrypted\r\n    ? 'https'\r\n    : 'http';\r\n  var trust = this.app.get('trust proxy fn');\r\n\r\n  if (!trust(this.connection.remoteAddress, 0)) {\r\n    return proto;\r\n  }\r\n\r\n  // Note: X-Forwarded-Proto is normally only ever a\r\n  //       single value, but this is to be safe.\r\n  var header = this.get('X-Forwarded-Proto') || proto\r\n  var index = header.indexOf(',')\r\n\r\n  return index !== -1\r\n    ? header.substring(0, index).trim()\r\n    : header.trim()\r\n});\r\n\r\n/**\r\n * Short-hand for:\r\n *\r\n *    req.protocol === 'https'\r\n *\r\n * @return {Boolean}\r\n * @public\r\n */\r\n\r\ndefineGetter(req, 'secure', function secure(){\r\n  return this.protocol === 'https';\r\n});\r\n\r\n/**\r\n * Return the remote address from the trusted proxy.\r\n *\r\n * The is the remote address on the socket unless\r\n * \"trust proxy\" is set.\r\n *\r\n * @return {String}\r\n * @public\r\n */\r\n\r\ndefineGetter(req, 'ip', function ip(){\r\n  var trust = this.app.get('trust proxy fn');\r\n  return proxyaddr(this, trust);\r\n});\r\n\r\n/**\r\n * When \"trust proxy\" is set, trusted proxy addresses + client.\r\n *\r\n * For example if the value were \"client, proxy1, proxy2\"\r\n * you would receive the array `[\"client\", \"proxy1\", \"proxy2\"]`\r\n * where \"proxy2\" is the furthest down-stream and \"proxy1\" and\r\n * \"proxy2\" were trusted.\r\n *\r\n * @return {Array}\r\n * @public\r\n */\r\n\r\ndefineGetter(req, 'ips', function ips() {\r\n  var trust = this.app.get('trust proxy fn');\r\n  var addrs = proxyaddr.all(this, trust);\r\n\r\n  // reverse the order (to farthest -> closest)\r\n  // and remove socket address\r\n  addrs.reverse().pop()\r\n\r\n  return addrs\r\n});\r\n\r\n/**\r\n * Return subdomains as an array.\r\n *\r\n * Subdomains are the dot-separated parts of the host before the main domain of\r\n * the app. By default, the domain of the app is assumed to be the last two\r\n * parts of the host. This can be changed by setting \"subdomain offset\".\r\n *\r\n * For example, if the domain is \"tobi.ferrets.example.com\":\r\n * If \"subdomain offset\" is not set, req.subdomains is `[\"ferrets\", \"tobi\"]`.\r\n * If \"subdomain offset\" is 3, req.subdomains is `[\"tobi\"]`.\r\n *\r\n * @return {Array}\r\n * @public\r\n */\r\n\r\ndefineGetter(req, 'subdomains', function subdomains() {\r\n  var hostname = this.hostname;\r\n\r\n  if (!hostname) return [];\r\n\r\n  var offset = this.app.get('subdomain offset');\r\n  var subdomains = !isIP(hostname)\r\n    ? hostname.split('.').reverse()\r\n    : [hostname];\r\n\r\n  return subdomains.slice(offset);\r\n});\r\n\r\n/**\r\n * Short-hand for `url.parse(req.url).pathname`.\r\n *\r\n * @return {String}\r\n * @public\r\n */\r\n\r\ndefineGetter(req, 'path', function path() {\r\n  return parse(this).pathname;\r\n});\r\n\r\n/**\r\n * Parse the \"Host\" header field to a hostname.\r\n *\r\n * When the \"trust proxy\" setting trusts the socket\r\n * address, the \"X-Forwarded-Host\" header field will\r\n * be trusted.\r\n *\r\n * @return {String}\r\n * @public\r\n */\r\n\r\ndefineGetter(req, 'hostname', function hostname(){\r\n  var trust = this.app.get('trust proxy fn');\r\n  var host = this.get('X-Forwarded-Host');\r\n\r\n  if (!host || !trust(this.connection.remoteAddress, 0)) {\r\n    host = this.get('Host');\r\n  } else if (host.indexOf(',') !== -1) {\r\n    // Note: X-Forwarded-Host is normally only ever a\r\n    //       single value, but this is to be safe.\r\n    host = host.substring(0, host.indexOf(',')).trimRight()\r\n  }\r\n\r\n  if (!host) return;\r\n\r\n  // IPv6 literal support\r\n  var offset = host[0] === '['\r\n    ? host.indexOf(']') + 1\r\n    : 0;\r\n  var index = host.indexOf(':', offset);\r\n\r\n  return index !== -1\r\n    ? host.substring(0, index)\r\n    : host;\r\n});\r\n\r\n// TODO: change req.host to return host in next major\r\n\r\ndefineGetter(req, 'host', deprecate.function(function host(){\r\n  return this.hostname;\r\n}, 'req.host: Use req.hostname instead'));\r\n\r\n/**\r\n * Check if the request is fresh, aka\r\n * Last-Modified and/or the ETag\r\n * still match.\r\n *\r\n * @return {Boolean}\r\n * @public\r\n */\r\n\r\ndefineGetter(req, 'fresh', function(){\r\n  var method = this.method;\r\n  var res = this.res\r\n  var status = res.statusCode\r\n\r\n  // GET or HEAD for weak freshness validation only\r\n  if ('GET' !== method && 'HEAD' !== method) return false;\r\n\r\n  // 2xx or 304 as per rfc2616 14.26\r\n  if ((status >= 200 && status < 300) || 304 === status) {\r\n    return fresh(this.headers, {\r\n      'etag': res.get('ETag'),\r\n      'last-modified': res.get('Last-Modified')\r\n    })\r\n  }\r\n\r\n  return false;\r\n});\r\n\r\n/**\r\n * Check if the request is stale, aka\r\n * \"Last-Modified\" and / or the \"ETag\" for the\r\n * resource has changed.\r\n *\r\n * @return {Boolean}\r\n * @public\r\n */\r\n\r\ndefineGetter(req, 'stale', function stale(){\r\n  return !this.fresh;\r\n});\r\n\r\n/**\r\n * Check if the request was an _XMLHttpRequest_.\r\n *\r\n * @return {Boolean}\r\n * @public\r\n */\r\n\r\ndefineGetter(req, 'xhr', function xhr(){\r\n  var val = this.get('X-Requested-With') || '';\r\n  return val.toLowerCase() === 'xmlhttprequest';\r\n});\r\n\r\n/**\r\n * Helper function for creating a getter on an object.\r\n *\r\n * @param {Object} obj\r\n * @param {String} name\r\n * @param {Function} getter\r\n * @private\r\n */\r\nfunction defineGetter(obj, name, getter) {\r\n  Object.defineProperty(obj, name, {\r\n    configurable: true,\r\n    enumerable: true,\r\n    get: getter\r\n  });\r\n}\r\n"]},"metadata":{},"sourceType":"script"}