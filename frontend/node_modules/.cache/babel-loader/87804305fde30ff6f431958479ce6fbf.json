{"ast":null,"code":"/*!\r\n * proxy-addr\r\n * Copyright(c) 2014-2016 Douglas Christopher Wilson\r\n * MIT Licensed\r\n */\n'use strict';\n/**\r\n * Module exports.\r\n * @public\r\n */\n\nmodule.exports = proxyaddr;\nmodule.exports.all = alladdrs;\nmodule.exports.compile = compile;\n/**\r\n * Module dependencies.\r\n * @private\r\n */\n\nvar forwarded = require('forwarded');\n\nvar ipaddr = require('ipaddr.js');\n/**\r\n * Variables.\r\n * @private\r\n */\n\n\nvar DIGIT_REGEXP = /^[0-9]+$/;\nvar isip = ipaddr.isValid;\nvar parseip = ipaddr.parse;\n/**\r\n * Pre-defined IP ranges.\r\n * @private\r\n */\n\nvar IP_RANGES = {\n  linklocal: ['169.254.0.0/16', 'fe80::/10'],\n  loopback: ['127.0.0.1/8', '::1/128'],\n  uniquelocal: ['10.0.0.0/8', '172.16.0.0/12', '192.168.0.0/16', 'fc00::/7']\n};\n/**\r\n * Get all addresses in the request, optionally stopping\r\n * at the first untrusted.\r\n *\r\n * @param {Object} request\r\n * @param {Function|Array|String} [trust]\r\n * @public\r\n */\n\nfunction alladdrs(req, trust) {\n  // get addresses\n  var addrs = forwarded(req);\n\n  if (!trust) {\n    // Return all addresses\n    return addrs;\n  }\n\n  if (typeof trust !== 'function') {\n    trust = compile(trust);\n  }\n\n  for (var i = 0; i < addrs.length - 1; i++) {\n    if (trust(addrs[i], i)) continue;\n    addrs.length = i + 1;\n  }\n\n  return addrs;\n}\n/**\r\n * Compile argument into trust function.\r\n *\r\n * @param {Array|String} val\r\n * @private\r\n */\n\n\nfunction compile(val) {\n  if (!val) {\n    throw new TypeError('argument is required');\n  }\n\n  var trust;\n\n  if (typeof val === 'string') {\n    trust = [val];\n  } else if (Array.isArray(val)) {\n    trust = val.slice();\n  } else {\n    throw new TypeError('unsupported trust argument');\n  }\n\n  for (var i = 0; i < trust.length; i++) {\n    val = trust[i];\n\n    if (!Object.prototype.hasOwnProperty.call(IP_RANGES, val)) {\n      continue;\n    } // Splice in pre-defined range\n\n\n    val = IP_RANGES[val];\n    trust.splice.apply(trust, [i, 1].concat(val));\n    i += val.length - 1;\n  }\n\n  return compileTrust(compileRangeSubnets(trust));\n}\n/**\r\n * Compile `arr` elements into range subnets.\r\n *\r\n * @param {Array} arr\r\n * @private\r\n */\n\n\nfunction compileRangeSubnets(arr) {\n  var rangeSubnets = new Array(arr.length);\n\n  for (var i = 0; i < arr.length; i++) {\n    rangeSubnets[i] = parseipNotation(arr[i]);\n  }\n\n  return rangeSubnets;\n}\n/**\r\n * Compile range subnet array into trust function.\r\n *\r\n * @param {Array} rangeSubnets\r\n * @private\r\n */\n\n\nfunction compileTrust(rangeSubnets) {\n  // Return optimized function based on length\n  var len = rangeSubnets.length;\n  return len === 0 ? trustNone : len === 1 ? trustSingle(rangeSubnets[0]) : trustMulti(rangeSubnets);\n}\n/**\r\n * Parse IP notation string into range subnet.\r\n *\r\n * @param {String} note\r\n * @private\r\n */\n\n\nfunction parseipNotation(note) {\n  var pos = note.lastIndexOf('/');\n  var str = pos !== -1 ? note.substring(0, pos) : note;\n\n  if (!isip(str)) {\n    throw new TypeError('invalid IP address: ' + str);\n  }\n\n  var ip = parseip(str);\n\n  if (pos === -1 && ip.kind() === 'ipv6' && ip.isIPv4MappedAddress()) {\n    // Store as IPv4\n    ip = ip.toIPv4Address();\n  }\n\n  var max = ip.kind() === 'ipv6' ? 128 : 32;\n  var range = pos !== -1 ? note.substring(pos + 1, note.length) : null;\n\n  if (range === null) {\n    range = max;\n  } else if (DIGIT_REGEXP.test(range)) {\n    range = parseInt(range, 10);\n  } else if (ip.kind() === 'ipv4' && isip(range)) {\n    range = parseNetmask(range);\n  } else {\n    range = null;\n  }\n\n  if (range <= 0 || range > max) {\n    throw new TypeError('invalid range on address: ' + note);\n  }\n\n  return [ip, range];\n}\n/**\r\n * Parse netmask string into CIDR range.\r\n *\r\n * @param {String} netmask\r\n * @private\r\n */\n\n\nfunction parseNetmask(netmask) {\n  var ip = parseip(netmask);\n  var kind = ip.kind();\n  return kind === 'ipv4' ? ip.prefixLengthFromSubnetMask() : null;\n}\n/**\r\n * Determine address of proxied request.\r\n *\r\n * @param {Object} request\r\n * @param {Function|Array|String} trust\r\n * @public\r\n */\n\n\nfunction proxyaddr(req, trust) {\n  if (!req) {\n    throw new TypeError('req argument is required');\n  }\n\n  if (!trust) {\n    throw new TypeError('trust argument is required');\n  }\n\n  var addrs = alladdrs(req, trust);\n  var addr = addrs[addrs.length - 1];\n  return addr;\n}\n/**\r\n * Static trust function to trust nothing.\r\n *\r\n * @private\r\n */\n\n\nfunction trustNone() {\n  return false;\n}\n/**\r\n * Compile trust function for multiple subnets.\r\n *\r\n * @param {Array} subnets\r\n * @private\r\n */\n\n\nfunction trustMulti(subnets) {\n  return function trust(addr) {\n    if (!isip(addr)) return false;\n    var ip = parseip(addr);\n    var ipconv;\n    var kind = ip.kind();\n\n    for (var i = 0; i < subnets.length; i++) {\n      var subnet = subnets[i];\n      var subnetip = subnet[0];\n      var subnetkind = subnetip.kind();\n      var subnetrange = subnet[1];\n      var trusted = ip;\n\n      if (kind !== subnetkind) {\n        if (subnetkind === 'ipv4' && !ip.isIPv4MappedAddress()) {\n          // Incompatible IP addresses\n          continue;\n        }\n\n        if (!ipconv) {\n          // Convert IP to match subnet IP kind\n          ipconv = subnetkind === 'ipv4' ? ip.toIPv4Address() : ip.toIPv4MappedAddress();\n        }\n\n        trusted = ipconv;\n      }\n\n      if (trusted.match(subnetip, subnetrange)) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n}\n/**\r\n * Compile trust function for single subnet.\r\n *\r\n * @param {Object} subnet\r\n * @private\r\n */\n\n\nfunction trustSingle(subnet) {\n  var subnetip = subnet[0];\n  var subnetkind = subnetip.kind();\n  var subnetisipv4 = subnetkind === 'ipv4';\n  var subnetrange = subnet[1];\n  return function trust(addr) {\n    if (!isip(addr)) return false;\n    var ip = parseip(addr);\n    var kind = ip.kind();\n\n    if (kind !== subnetkind) {\n      if (subnetisipv4 && !ip.isIPv4MappedAddress()) {\n        // Incompatible IP addresses\n        return false;\n      } // Convert IP to match subnet IP kind\n\n\n      ip = subnetisipv4 ? ip.toIPv4Address() : ip.toIPv4MappedAddress();\n    }\n\n    return ip.match(subnetip, subnetrange);\n  };\n}","map":{"version":3,"sources":["D:/Work/Testes/react-crud-test/frontend/node_modules/proxy-addr/index.js"],"names":["module","exports","proxyaddr","all","alladdrs","compile","forwarded","require","ipaddr","DIGIT_REGEXP","isip","isValid","parseip","parse","IP_RANGES","linklocal","loopback","uniquelocal","req","trust","addrs","i","length","val","TypeError","Array","isArray","slice","Object","prototype","hasOwnProperty","call","splice","apply","concat","compileTrust","compileRangeSubnets","arr","rangeSubnets","parseipNotation","len","trustNone","trustSingle","trustMulti","note","pos","lastIndexOf","str","substring","ip","kind","isIPv4MappedAddress","toIPv4Address","max","range","test","parseInt","parseNetmask","netmask","prefixLengthFromSubnetMask","addr","subnets","ipconv","subnet","subnetip","subnetkind","subnetrange","trusted","toIPv4MappedAddress","match","subnetisipv4"],"mappings":"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","sourcesContent":["/*!\r\n * proxy-addr\r\n * Copyright(c) 2014-2016 Douglas Christopher Wilson\r\n * MIT Licensed\r\n */\r\n\r\n'use strict'\r\n\r\n/**\r\n * Module exports.\r\n * @public\r\n */\r\n\r\nmodule.exports = proxyaddr\r\nmodule.exports.all = alladdrs\r\nmodule.exports.compile = compile\r\n\r\n/**\r\n * Module dependencies.\r\n * @private\r\n */\r\n\r\nvar forwarded = require('forwarded')\r\nvar ipaddr = require('ipaddr.js')\r\n\r\n/**\r\n * Variables.\r\n * @private\r\n */\r\n\r\nvar DIGIT_REGEXP = /^[0-9]+$/\r\nvar isip = ipaddr.isValid\r\nvar parseip = ipaddr.parse\r\n\r\n/**\r\n * Pre-defined IP ranges.\r\n * @private\r\n */\r\n\r\nvar IP_RANGES = {\r\n  linklocal: ['169.254.0.0/16', 'fe80::/10'],\r\n  loopback: ['127.0.0.1/8', '::1/128'],\r\n  uniquelocal: ['10.0.0.0/8', '172.16.0.0/12', '192.168.0.0/16', 'fc00::/7']\r\n}\r\n\r\n/**\r\n * Get all addresses in the request, optionally stopping\r\n * at the first untrusted.\r\n *\r\n * @param {Object} request\r\n * @param {Function|Array|String} [trust]\r\n * @public\r\n */\r\n\r\nfunction alladdrs (req, trust) {\r\n  // get addresses\r\n  var addrs = forwarded(req)\r\n\r\n  if (!trust) {\r\n    // Return all addresses\r\n    return addrs\r\n  }\r\n\r\n  if (typeof trust !== 'function') {\r\n    trust = compile(trust)\r\n  }\r\n\r\n  for (var i = 0; i < addrs.length - 1; i++) {\r\n    if (trust(addrs[i], i)) continue\r\n\r\n    addrs.length = i + 1\r\n  }\r\n\r\n  return addrs\r\n}\r\n\r\n/**\r\n * Compile argument into trust function.\r\n *\r\n * @param {Array|String} val\r\n * @private\r\n */\r\n\r\nfunction compile (val) {\r\n  if (!val) {\r\n    throw new TypeError('argument is required')\r\n  }\r\n\r\n  var trust\r\n\r\n  if (typeof val === 'string') {\r\n    trust = [val]\r\n  } else if (Array.isArray(val)) {\r\n    trust = val.slice()\r\n  } else {\r\n    throw new TypeError('unsupported trust argument')\r\n  }\r\n\r\n  for (var i = 0; i < trust.length; i++) {\r\n    val = trust[i]\r\n\r\n    if (!Object.prototype.hasOwnProperty.call(IP_RANGES, val)) {\r\n      continue\r\n    }\r\n\r\n    // Splice in pre-defined range\r\n    val = IP_RANGES[val]\r\n    trust.splice.apply(trust, [i, 1].concat(val))\r\n    i += val.length - 1\r\n  }\r\n\r\n  return compileTrust(compileRangeSubnets(trust))\r\n}\r\n\r\n/**\r\n * Compile `arr` elements into range subnets.\r\n *\r\n * @param {Array} arr\r\n * @private\r\n */\r\n\r\nfunction compileRangeSubnets (arr) {\r\n  var rangeSubnets = new Array(arr.length)\r\n\r\n  for (var i = 0; i < arr.length; i++) {\r\n    rangeSubnets[i] = parseipNotation(arr[i])\r\n  }\r\n\r\n  return rangeSubnets\r\n}\r\n\r\n/**\r\n * Compile range subnet array into trust function.\r\n *\r\n * @param {Array} rangeSubnets\r\n * @private\r\n */\r\n\r\nfunction compileTrust (rangeSubnets) {\r\n  // Return optimized function based on length\r\n  var len = rangeSubnets.length\r\n  return len === 0\r\n    ? trustNone\r\n    : len === 1\r\n      ? trustSingle(rangeSubnets[0])\r\n      : trustMulti(rangeSubnets)\r\n}\r\n\r\n/**\r\n * Parse IP notation string into range subnet.\r\n *\r\n * @param {String} note\r\n * @private\r\n */\r\n\r\nfunction parseipNotation (note) {\r\n  var pos = note.lastIndexOf('/')\r\n  var str = pos !== -1\r\n    ? note.substring(0, pos)\r\n    : note\r\n\r\n  if (!isip(str)) {\r\n    throw new TypeError('invalid IP address: ' + str)\r\n  }\r\n\r\n  var ip = parseip(str)\r\n\r\n  if (pos === -1 && ip.kind() === 'ipv6' && ip.isIPv4MappedAddress()) {\r\n    // Store as IPv4\r\n    ip = ip.toIPv4Address()\r\n  }\r\n\r\n  var max = ip.kind() === 'ipv6'\r\n    ? 128\r\n    : 32\r\n\r\n  var range = pos !== -1\r\n    ? note.substring(pos + 1, note.length)\r\n    : null\r\n\r\n  if (range === null) {\r\n    range = max\r\n  } else if (DIGIT_REGEXP.test(range)) {\r\n    range = parseInt(range, 10)\r\n  } else if (ip.kind() === 'ipv4' && isip(range)) {\r\n    range = parseNetmask(range)\r\n  } else {\r\n    range = null\r\n  }\r\n\r\n  if (range <= 0 || range > max) {\r\n    throw new TypeError('invalid range on address: ' + note)\r\n  }\r\n\r\n  return [ip, range]\r\n}\r\n\r\n/**\r\n * Parse netmask string into CIDR range.\r\n *\r\n * @param {String} netmask\r\n * @private\r\n */\r\n\r\nfunction parseNetmask (netmask) {\r\n  var ip = parseip(netmask)\r\n  var kind = ip.kind()\r\n\r\n  return kind === 'ipv4'\r\n    ? ip.prefixLengthFromSubnetMask()\r\n    : null\r\n}\r\n\r\n/**\r\n * Determine address of proxied request.\r\n *\r\n * @param {Object} request\r\n * @param {Function|Array|String} trust\r\n * @public\r\n */\r\n\r\nfunction proxyaddr (req, trust) {\r\n  if (!req) {\r\n    throw new TypeError('req argument is required')\r\n  }\r\n\r\n  if (!trust) {\r\n    throw new TypeError('trust argument is required')\r\n  }\r\n\r\n  var addrs = alladdrs(req, trust)\r\n  var addr = addrs[addrs.length - 1]\r\n\r\n  return addr\r\n}\r\n\r\n/**\r\n * Static trust function to trust nothing.\r\n *\r\n * @private\r\n */\r\n\r\nfunction trustNone () {\r\n  return false\r\n}\r\n\r\n/**\r\n * Compile trust function for multiple subnets.\r\n *\r\n * @param {Array} subnets\r\n * @private\r\n */\r\n\r\nfunction trustMulti (subnets) {\r\n  return function trust (addr) {\r\n    if (!isip(addr)) return false\r\n\r\n    var ip = parseip(addr)\r\n    var ipconv\r\n    var kind = ip.kind()\r\n\r\n    for (var i = 0; i < subnets.length; i++) {\r\n      var subnet = subnets[i]\r\n      var subnetip = subnet[0]\r\n      var subnetkind = subnetip.kind()\r\n      var subnetrange = subnet[1]\r\n      var trusted = ip\r\n\r\n      if (kind !== subnetkind) {\r\n        if (subnetkind === 'ipv4' && !ip.isIPv4MappedAddress()) {\r\n          // Incompatible IP addresses\r\n          continue\r\n        }\r\n\r\n        if (!ipconv) {\r\n          // Convert IP to match subnet IP kind\r\n          ipconv = subnetkind === 'ipv4'\r\n            ? ip.toIPv4Address()\r\n            : ip.toIPv4MappedAddress()\r\n        }\r\n\r\n        trusted = ipconv\r\n      }\r\n\r\n      if (trusted.match(subnetip, subnetrange)) {\r\n        return true\r\n      }\r\n    }\r\n\r\n    return false\r\n  }\r\n}\r\n\r\n/**\r\n * Compile trust function for single subnet.\r\n *\r\n * @param {Object} subnet\r\n * @private\r\n */\r\n\r\nfunction trustSingle (subnet) {\r\n  var subnetip = subnet[0]\r\n  var subnetkind = subnetip.kind()\r\n  var subnetisipv4 = subnetkind === 'ipv4'\r\n  var subnetrange = subnet[1]\r\n\r\n  return function trust (addr) {\r\n    if (!isip(addr)) return false\r\n\r\n    var ip = parseip(addr)\r\n    var kind = ip.kind()\r\n\r\n    if (kind !== subnetkind) {\r\n      if (subnetisipv4 && !ip.isIPv4MappedAddress()) {\r\n        // Incompatible IP addresses\r\n        return false\r\n      }\r\n\r\n      // Convert IP to match subnet IP kind\r\n      ip = subnetisipv4\r\n        ? ip.toIPv4Address()\r\n        : ip.toIPv4MappedAddress()\r\n    }\r\n\r\n    return ip.match(subnetip, subnetrange)\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}